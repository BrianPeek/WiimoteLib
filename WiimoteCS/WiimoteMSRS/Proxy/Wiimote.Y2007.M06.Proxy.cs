//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3521
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("1.5.2.0")]
[assembly: global::System.Reflection.AssemblyCopyrightAttribute("Copyright Â© 2008 Brian Peek (www.brianpeek.com)")]
[assembly: global::System.Reflection.AssemblyCompanyAttribute("Brian Peek (www.brianpeek.com)")]
[assembly: global::System.Reflection.AssemblyProductAttribute("WiimoteMSRS")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("WiimoteMSRS")]
[assembly: global::System.Reflection.AssemblyDescriptionAttribute("Microsoft Robotics Studio Service for the Nintendo Wiimote")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="Wiimote.Y2007.M06, Version=1.5.2.0, Culture=neutral, PublicKeyToken=21bd729cd9834" +
    "f06")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.AllowPartiallyTrustedCallersAttribute()]

namespace WiimoteLib.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="WiimoteState")]
    public class WiimoteState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public WiimoteState() {
        }
        
        private global::WiimoteLib.Proxy.AccelCalibrationInfo _AccelCalibrationInfo;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.AccelCalibrationInfo AccelCalibrationInfo {
            get {
                return this._AccelCalibrationInfo;
            }
            set {
                this._AccelCalibrationInfo = value;
            }
        }
        
        private global::WiimoteLib.Proxy.AccelState _AccelState;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.AccelState AccelState {
            get {
                return this._AccelState;
            }
            set {
                this._AccelState = value;
            }
        }
        
        private global::WiimoteLib.Proxy.ButtonState _ButtonState;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.ButtonState ButtonState {
            get {
                return this._ButtonState;
            }
            set {
                this._ButtonState = value;
            }
        }
        
        private global::WiimoteLib.Proxy.IRState _IRState;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.IRState IRState {
            get {
                return this._IRState;
            }
            set {
                this._IRState = value;
            }
        }
        
        private byte _BatteryRaw;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte BatteryRaw {
            get {
                return this._BatteryRaw;
            }
            set {
                this._BatteryRaw = value;
            }
        }
        
        private float _Battery;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float Battery {
            get {
                return this._Battery;
            }
            set {
                this._Battery = value;
            }
        }
        
        private bool _Rumble;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Rumble {
            get {
                return this._Rumble;
            }
            set {
                this._Rumble = value;
            }
        }
        
        private bool _Extension;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Extension {
            get {
                return this._Extension;
            }
            set {
                this._Extension = value;
            }
        }
        
        private global::WiimoteLib.Proxy.ExtensionType _ExtensionType;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.ExtensionType ExtensionType {
            get {
                return this._ExtensionType;
            }
            set {
                this._ExtensionType = value;
            }
        }
        
        private global::WiimoteLib.Proxy.NunchukState _NunchukState;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.NunchukState NunchukState {
            get {
                return this._NunchukState;
            }
            set {
                this._NunchukState = value;
            }
        }
        
        private global::WiimoteLib.Proxy.ClassicControllerState _ClassicControllerState;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.ClassicControllerState ClassicControllerState {
            get {
                return this._ClassicControllerState;
            }
            set {
                this._ClassicControllerState = value;
            }
        }
        
        private global::WiimoteLib.Proxy.GuitarState _GuitarState;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.GuitarState GuitarState {
            get {
                return this._GuitarState;
            }
            set {
                this._GuitarState = value;
            }
        }
        
        private global::WiimoteLib.Proxy.DrumsState _DrumsState;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.DrumsState DrumsState {
            get {
                return this._DrumsState;
            }
            set {
                this._DrumsState = value;
            }
        }
        
        private global::WiimoteLib.Proxy.LEDState _LEDState;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.LEDState LEDState {
            get {
                return this._LEDState;
            }
            set {
                this._LEDState = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current WiimoteState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::WiimoteLib.Proxy.WiimoteState typedTarget = ((global::WiimoteLib.Proxy.WiimoteState)(target));
            typedTarget._AccelCalibrationInfo = this._AccelCalibrationInfo;
            typedTarget._AccelState = this._AccelState;
            typedTarget._ButtonState = this._ButtonState;
            typedTarget._IRState = this._IRState;
            typedTarget._BatteryRaw = this._BatteryRaw;
            typedTarget._Battery = this._Battery;
            typedTarget._Rumble = this._Rumble;
            typedTarget._Extension = this._Extension;
            typedTarget._ExtensionType = this._ExtensionType;
            typedTarget._NunchukState = this._NunchukState;
            typedTarget._ClassicControllerState = this._ClassicControllerState;
            typedTarget._GuitarState = this._GuitarState;
            typedTarget._DrumsState = this._DrumsState;
            typedTarget._LEDState = this._LEDState;
        }
        
        /// <summary>
        ///Clones WiimoteState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::WiimoteLib.Proxy.WiimoteState target0 = new global::WiimoteLib.Proxy.WiimoteState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current WiimoteState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            ((Microsoft.Dss.Core.IDssSerializable)(this._AccelCalibrationInfo)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._AccelState)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._ButtonState)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._IRState)).Serialize(writer);
            writer.Write(this._BatteryRaw);
            writer.Write(this._Battery);
            writer.Write(this._Rumble);
            writer.Write(this._Extension);
            writer.Write(((long)(this._ExtensionType)));
            ((Microsoft.Dss.Core.IDssSerializable)(this._NunchukState)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._ClassicControllerState)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._GuitarState)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._DrumsState)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._LEDState)).Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes WiimoteState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized WiimoteState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._AccelCalibrationInfo = ((global::WiimoteLib.Proxy.AccelCalibrationInfo)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.AccelCalibrationInfo())).Deserialize(reader)));
            this._AccelState = ((global::WiimoteLib.Proxy.AccelState)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.AccelState())).Deserialize(reader)));
            this._ButtonState = ((global::WiimoteLib.Proxy.ButtonState)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.ButtonState())).Deserialize(reader)));
            this._IRState = ((global::WiimoteLib.Proxy.IRState)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.IRState())).Deserialize(reader)));
            this._BatteryRaw = reader.ReadByte();
            this._Battery = reader.ReadSingle();
            this._Rumble = reader.ReadBoolean();
            this._Extension = reader.ReadBoolean();
            this._ExtensionType = ((global::WiimoteLib.Proxy.ExtensionType)(reader.ReadInt64()));
            this._NunchukState = ((global::WiimoteLib.Proxy.NunchukState)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.NunchukState())).Deserialize(reader)));
            this._ClassicControllerState = ((global::WiimoteLib.Proxy.ClassicControllerState)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.ClassicControllerState())).Deserialize(reader)));
            this._GuitarState = ((global::WiimoteLib.Proxy.GuitarState)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.GuitarState())).Deserialize(reader)));
            this._DrumsState = ((global::WiimoteLib.Proxy.DrumsState)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.DrumsState())).Deserialize(reader)));
            this._LEDState = ((global::WiimoteLib.Proxy.LEDState)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.LEDState())).Deserialize(reader)));
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="AccelCalibrationInfo")]
    public struct AccelCalibrationInfo : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        private byte _X0;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte X0 {
            get {
                return this._X0;
            }
            set {
                this._X0 = value;
            }
        }
        
        private byte _Y0;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte Y0 {
            get {
                return this._Y0;
            }
            set {
                this._Y0 = value;
            }
        }
        
        private byte _Z0;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte Z0 {
            get {
                return this._Z0;
            }
            set {
                this._Z0 = value;
            }
        }
        
        private byte _XG;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte XG {
            get {
                return this._XG;
            }
            set {
                this._XG = value;
            }
        }
        
        private byte _YG;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte YG {
            get {
                return this._YG;
            }
            set {
                this._YG = value;
            }
        }
        
        private byte _ZG;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte ZG {
            get {
                return this._ZG;
            }
            set {
                this._ZG = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current AccelCalibrationInfo to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones AccelCalibrationInfo
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.AccelCalibrationInfo target0 = new global::WiimoteLib.Proxy.AccelCalibrationInfo();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current AccelCalibrationInfo to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._X0);
            writer.Write(this._Y0);
            writer.Write(this._Z0);
            writer.Write(this._XG);
            writer.Write(this._YG);
            writer.Write(this._ZG);
        }
        
        /// <summary>
        ///Deserializes AccelCalibrationInfo
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized AccelCalibrationInfo</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            this._X0 = reader.ReadByte();
            this._Y0 = reader.ReadByte();
            this._Z0 = reader.ReadByte();
            this._XG = reader.ReadByte();
            this._YG = reader.ReadByte();
            this._ZG = reader.ReadByte();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="AccelState")]
    public struct AccelState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        private global::WiimoteLib.Proxy.Point3 _RawValues;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.Point3 RawValues {
            get {
                return this._RawValues;
            }
            set {
                this._RawValues = value;
            }
        }
        
        private global::WiimoteLib.Proxy.Point3F _Values;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.Point3F Values {
            get {
                return this._Values;
            }
            set {
                this._Values = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current AccelState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones AccelState
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.AccelState target0 = new global::WiimoteLib.Proxy.AccelState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current AccelState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
            ((Microsoft.Dss.Core.IDssSerializable)(this._RawValues)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._Values)).Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes AccelState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized AccelState</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            this._RawValues = ((global::WiimoteLib.Proxy.Point3)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.Point3())).Deserialize(reader)));
            this._Values = ((global::WiimoteLib.Proxy.Point3F)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.Point3F())).Deserialize(reader)));
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="Point3")]
    public struct Point3 : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        private int _X;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int X {
            get {
                return this._X;
            }
            set {
                this._X = value;
            }
        }
        
        private int _Y;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int Y {
            get {
                return this._Y;
            }
            set {
                this._Y = value;
            }
        }
        
        private int _Z;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int Z {
            get {
                return this._Z;
            }
            set {
                this._Z = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Point3 to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones Point3
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.Point3 target0 = new global::WiimoteLib.Proxy.Point3();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Point3 to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._X);
            writer.Write(this._Y);
            writer.Write(this._Z);
        }
        
        /// <summary>
        ///Deserializes Point3
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Point3</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            this._X = reader.ReadInt32();
            this._Y = reader.ReadInt32();
            this._Z = reader.ReadInt32();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="Point3F")]
    public struct Point3F : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        private float _X;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float X {
            get {
                return this._X;
            }
            set {
                this._X = value;
            }
        }
        
        private float _Y;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float Y {
            get {
                return this._Y;
            }
            set {
                this._Y = value;
            }
        }
        
        private float _Z;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float Z {
            get {
                return this._Z;
            }
            set {
                this._Z = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Point3F to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones Point3F
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.Point3F target0 = new global::WiimoteLib.Proxy.Point3F();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Point3F to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._X);
            writer.Write(this._Y);
            writer.Write(this._Z);
        }
        
        /// <summary>
        ///Deserializes Point3F
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Point3F</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            this._X = reader.ReadSingle();
            this._Y = reader.ReadSingle();
            this._Z = reader.ReadSingle();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="ButtonState")]
    public struct ButtonState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        private bool _A;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool A {
            get {
                return this._A;
            }
            set {
                this._A = value;
            }
        }
        
        private bool _B;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool B {
            get {
                return this._B;
            }
            set {
                this._B = value;
            }
        }
        
        private bool _Plus;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Plus {
            get {
                return this._Plus;
            }
            set {
                this._Plus = value;
            }
        }
        
        private bool _Home;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Home {
            get {
                return this._Home;
            }
            set {
                this._Home = value;
            }
        }
        
        private bool _Minus;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Minus {
            get {
                return this._Minus;
            }
            set {
                this._Minus = value;
            }
        }
        
        private bool _One;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool One {
            get {
                return this._One;
            }
            set {
                this._One = value;
            }
        }
        
        private bool _Two;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Two {
            get {
                return this._Two;
            }
            set {
                this._Two = value;
            }
        }
        
        private bool _Up;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Up {
            get {
                return this._Up;
            }
            set {
                this._Up = value;
            }
        }
        
        private bool _Down;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Down {
            get {
                return this._Down;
            }
            set {
                this._Down = value;
            }
        }
        
        private bool _Left;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Left {
            get {
                return this._Left;
            }
            set {
                this._Left = value;
            }
        }
        
        private bool _Right;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Right {
            get {
                return this._Right;
            }
            set {
                this._Right = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ButtonState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones ButtonState
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.ButtonState target0 = new global::WiimoteLib.Proxy.ButtonState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ButtonState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._A);
            writer.Write(this._B);
            writer.Write(this._Plus);
            writer.Write(this._Home);
            writer.Write(this._Minus);
            writer.Write(this._One);
            writer.Write(this._Two);
            writer.Write(this._Up);
            writer.Write(this._Down);
            writer.Write(this._Left);
            writer.Write(this._Right);
        }
        
        /// <summary>
        ///Deserializes ButtonState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ButtonState</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            this._A = reader.ReadBoolean();
            this._B = reader.ReadBoolean();
            this._Plus = reader.ReadBoolean();
            this._Home = reader.ReadBoolean();
            this._Minus = reader.ReadBoolean();
            this._One = reader.ReadBoolean();
            this._Two = reader.ReadBoolean();
            this._Up = reader.ReadBoolean();
            this._Down = reader.ReadBoolean();
            this._Left = reader.ReadBoolean();
            this._Right = reader.ReadBoolean();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="IRState")]
    public struct IRState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        private global::WiimoteLib.Proxy.IRMode _Mode;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.IRMode Mode {
            get {
                return this._Mode;
            }
            set {
                this._Mode = value;
            }
        }
        
        private WiimoteLib.Proxy.IRSensor[] _IRSensors;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public WiimoteLib.Proxy.IRSensor[] IRSensors {
            get {
                return this._IRSensors;
            }
            set {
                this._IRSensors = value;
            }
        }
        
        private global::WiimoteLib.Proxy.Point _RawMidpoint;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.Point RawMidpoint {
            get {
                return this._RawMidpoint;
            }
            set {
                this._RawMidpoint = value;
            }
        }
        
        private global::WiimoteLib.Proxy.PointF _Midpoint;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.PointF Midpoint {
            get {
                return this._Midpoint;
            }
            set {
                this._Midpoint = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current IRState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones IRState
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.IRState target0 = new global::WiimoteLib.Proxy.IRState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current IRState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((byte)(this._Mode)));
            if ((this._IRSensors == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(1);
                writer.Write(this._IRSensors.Length);
                for (int indexIRSensors = 0; (indexIRSensors < this._IRSensors.Length); indexIRSensors = (indexIRSensors + 1)) {
                    ((Microsoft.Dss.Core.IDssSerializable)(this._IRSensors[indexIRSensors])).Serialize(writer);
                }
            }
            ((Microsoft.Dss.Core.IDssSerializable)(this._RawMidpoint)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._Midpoint)).Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes IRState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized IRState</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            this._Mode = ((global::WiimoteLib.Proxy.IRMode)(reader.ReadByte()));
            if ((reader.ReadByte() != 0)) {
                int tmp = reader.ReadInt32();
                int count = reader.ReadInt32();
                this._IRSensors = new global::WiimoteLib.Proxy.IRSensor[count];
                for (int index = 0; (index < count); index = (index + 1)) {
                    this._IRSensors[index] = ((global::WiimoteLib.Proxy.IRSensor)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.IRSensor())).Deserialize(reader)));
                }
            }
            this._RawMidpoint = ((global::WiimoteLib.Proxy.Point)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.Point())).Deserialize(reader)));
            this._Midpoint = ((global::WiimoteLib.Proxy.PointF)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.PointF())).Deserialize(reader)));
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="IRSensor")]
    public struct IRSensor : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        private global::WiimoteLib.Proxy.Point _RawPosition;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.Point RawPosition {
            get {
                return this._RawPosition;
            }
            set {
                this._RawPosition = value;
            }
        }
        
        private global::WiimoteLib.Proxy.PointF _Position;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.PointF Position {
            get {
                return this._Position;
            }
            set {
                this._Position = value;
            }
        }
        
        private int _Size;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int Size {
            get {
                return this._Size;
            }
            set {
                this._Size = value;
            }
        }
        
        private bool _Found;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Found {
            get {
                return this._Found;
            }
            set {
                this._Found = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current IRSensor to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones IRSensor
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.IRSensor target0 = new global::WiimoteLib.Proxy.IRSensor();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current IRSensor to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
            ((Microsoft.Dss.Core.IDssSerializable)(this._RawPosition)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._Position)).Serialize(writer);
            writer.Write(this._Size);
            writer.Write(this._Found);
        }
        
        /// <summary>
        ///Deserializes IRSensor
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized IRSensor</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            this._RawPosition = ((global::WiimoteLib.Proxy.Point)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.Point())).Deserialize(reader)));
            this._Position = ((global::WiimoteLib.Proxy.PointF)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.PointF())).Deserialize(reader)));
            this._Size = reader.ReadInt32();
            this._Found = reader.ReadBoolean();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="Point")]
    public struct Point : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        private int _X;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int X {
            get {
                return this._X;
            }
            set {
                this._X = value;
            }
        }
        
        private int _Y;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int Y {
            get {
                return this._Y;
            }
            set {
                this._Y = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Point to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones Point
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.Point target0 = new global::WiimoteLib.Proxy.Point();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Point to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._X);
            writer.Write(this._Y);
        }
        
        /// <summary>
        ///Deserializes Point
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Point</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            this._X = reader.ReadInt32();
            this._Y = reader.ReadInt32();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="PointF")]
    public struct PointF : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        private float _X;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float X {
            get {
                return this._X;
            }
            set {
                this._X = value;
            }
        }
        
        private float _Y;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float Y {
            get {
                return this._Y;
            }
            set {
                this._Y = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current PointF to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones PointF
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.PointF target0 = new global::WiimoteLib.Proxy.PointF();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current PointF to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._X);
            writer.Write(this._Y);
        }
        
        /// <summary>
        ///Deserializes PointF
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized PointF</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            this._X = reader.ReadSingle();
            this._Y = reader.ReadSingle();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="NunchukState")]
    public struct NunchukState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        private global::WiimoteLib.Proxy.NunchukCalibrationInfo _CalibrationInfo;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.NunchukCalibrationInfo CalibrationInfo {
            get {
                return this._CalibrationInfo;
            }
            set {
                this._CalibrationInfo = value;
            }
        }
        
        private global::WiimoteLib.Proxy.AccelState _AccelState;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.AccelState AccelState {
            get {
                return this._AccelState;
            }
            set {
                this._AccelState = value;
            }
        }
        
        private global::WiimoteLib.Proxy.Point _RawJoystick;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.Point RawJoystick {
            get {
                return this._RawJoystick;
            }
            set {
                this._RawJoystick = value;
            }
        }
        
        private global::WiimoteLib.Proxy.PointF _Joystick;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.PointF Joystick {
            get {
                return this._Joystick;
            }
            set {
                this._Joystick = value;
            }
        }
        
        private bool _C;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool C {
            get {
                return this._C;
            }
            set {
                this._C = value;
            }
        }
        
        private bool _Z;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Z {
            get {
                return this._Z;
            }
            set {
                this._Z = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current NunchukState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones NunchukState
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.NunchukState target0 = new global::WiimoteLib.Proxy.NunchukState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current NunchukState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
            ((Microsoft.Dss.Core.IDssSerializable)(this._CalibrationInfo)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._AccelState)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._RawJoystick)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._Joystick)).Serialize(writer);
            writer.Write(this._C);
            writer.Write(this._Z);
        }
        
        /// <summary>
        ///Deserializes NunchukState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized NunchukState</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            this._CalibrationInfo = ((global::WiimoteLib.Proxy.NunchukCalibrationInfo)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.NunchukCalibrationInfo())).Deserialize(reader)));
            this._AccelState = ((global::WiimoteLib.Proxy.AccelState)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.AccelState())).Deserialize(reader)));
            this._RawJoystick = ((global::WiimoteLib.Proxy.Point)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.Point())).Deserialize(reader)));
            this._Joystick = ((global::WiimoteLib.Proxy.PointF)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.PointF())).Deserialize(reader)));
            this._C = reader.ReadBoolean();
            this._Z = reader.ReadBoolean();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="NunchukCalibrationInfo")]
    public struct NunchukCalibrationInfo : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        private byte _MinX;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte MinX {
            get {
                return this._MinX;
            }
            set {
                this._MinX = value;
            }
        }
        
        private byte _MidX;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte MidX {
            get {
                return this._MidX;
            }
            set {
                this._MidX = value;
            }
        }
        
        private byte _MaxX;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte MaxX {
            get {
                return this._MaxX;
            }
            set {
                this._MaxX = value;
            }
        }
        
        private byte _MinY;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte MinY {
            get {
                return this._MinY;
            }
            set {
                this._MinY = value;
            }
        }
        
        private byte _MidY;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte MidY {
            get {
                return this._MidY;
            }
            set {
                this._MidY = value;
            }
        }
        
        private byte _MaxY;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte MaxY {
            get {
                return this._MaxY;
            }
            set {
                this._MaxY = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current NunchukCalibrationInfo to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones NunchukCalibrationInfo
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.NunchukCalibrationInfo target0 = new global::WiimoteLib.Proxy.NunchukCalibrationInfo();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current NunchukCalibrationInfo to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._MinX);
            writer.Write(this._MidX);
            writer.Write(this._MaxX);
            writer.Write(this._MinY);
            writer.Write(this._MidY);
            writer.Write(this._MaxY);
        }
        
        /// <summary>
        ///Deserializes NunchukCalibrationInfo
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized NunchukCalibrationInfo</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            this._MinX = reader.ReadByte();
            this._MidX = reader.ReadByte();
            this._MaxX = reader.ReadByte();
            this._MinY = reader.ReadByte();
            this._MidY = reader.ReadByte();
            this._MaxY = reader.ReadByte();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="ClassicControllerState")]
    public struct ClassicControllerState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        private global::WiimoteLib.Proxy.ClassicControllerCalibrationInfo _CalibrationInfo;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.ClassicControllerCalibrationInfo CalibrationInfo {
            get {
                return this._CalibrationInfo;
            }
            set {
                this._CalibrationInfo = value;
            }
        }
        
        private global::WiimoteLib.Proxy.ClassicControllerButtonState _ButtonState;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.ClassicControllerButtonState ButtonState {
            get {
                return this._ButtonState;
            }
            set {
                this._ButtonState = value;
            }
        }
        
        private global::WiimoteLib.Proxy.Point _RawJoystickL;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.Point RawJoystickL {
            get {
                return this._RawJoystickL;
            }
            set {
                this._RawJoystickL = value;
            }
        }
        
        private global::WiimoteLib.Proxy.Point _RawJoystickR;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.Point RawJoystickR {
            get {
                return this._RawJoystickR;
            }
            set {
                this._RawJoystickR = value;
            }
        }
        
        private global::WiimoteLib.Proxy.PointF _JoystickL;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.PointF JoystickL {
            get {
                return this._JoystickL;
            }
            set {
                this._JoystickL = value;
            }
        }
        
        private global::WiimoteLib.Proxy.PointF _JoystickR;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.PointF JoystickR {
            get {
                return this._JoystickR;
            }
            set {
                this._JoystickR = value;
            }
        }
        
        private byte _RawTriggerL;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte RawTriggerL {
            get {
                return this._RawTriggerL;
            }
            set {
                this._RawTriggerL = value;
            }
        }
        
        private byte _RawTriggerR;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte RawTriggerR {
            get {
                return this._RawTriggerR;
            }
            set {
                this._RawTriggerR = value;
            }
        }
        
        private float _TriggerL;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float TriggerL {
            get {
                return this._TriggerL;
            }
            set {
                this._TriggerL = value;
            }
        }
        
        private float _TriggerR;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float TriggerR {
            get {
                return this._TriggerR;
            }
            set {
                this._TriggerR = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ClassicControllerState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones ClassicControllerState
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.ClassicControllerState target0 = new global::WiimoteLib.Proxy.ClassicControllerState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ClassicControllerState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
            ((Microsoft.Dss.Core.IDssSerializable)(this._CalibrationInfo)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._ButtonState)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._RawJoystickL)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._RawJoystickR)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._JoystickL)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._JoystickR)).Serialize(writer);
            writer.Write(this._RawTriggerL);
            writer.Write(this._RawTriggerR);
            writer.Write(this._TriggerL);
            writer.Write(this._TriggerR);
        }
        
        /// <summary>
        ///Deserializes ClassicControllerState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ClassicControllerState</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            this._CalibrationInfo = ((global::WiimoteLib.Proxy.ClassicControllerCalibrationInfo)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.ClassicControllerCalibrationInfo())).Deserialize(reader)));
            this._ButtonState = ((global::WiimoteLib.Proxy.ClassicControllerButtonState)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.ClassicControllerButtonState())).Deserialize(reader)));
            this._RawJoystickL = ((global::WiimoteLib.Proxy.Point)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.Point())).Deserialize(reader)));
            this._RawJoystickR = ((global::WiimoteLib.Proxy.Point)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.Point())).Deserialize(reader)));
            this._JoystickL = ((global::WiimoteLib.Proxy.PointF)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.PointF())).Deserialize(reader)));
            this._JoystickR = ((global::WiimoteLib.Proxy.PointF)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.PointF())).Deserialize(reader)));
            this._RawTriggerL = reader.ReadByte();
            this._RawTriggerR = reader.ReadByte();
            this._TriggerL = reader.ReadSingle();
            this._TriggerR = reader.ReadSingle();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="ClassicControllerCalibrationInfo")]
    public struct ClassicControllerCalibrationInfo : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        private byte _MinXL;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte MinXL {
            get {
                return this._MinXL;
            }
            set {
                this._MinXL = value;
            }
        }
        
        private byte _MidXL;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte MidXL {
            get {
                return this._MidXL;
            }
            set {
                this._MidXL = value;
            }
        }
        
        private byte _MaxXL;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte MaxXL {
            get {
                return this._MaxXL;
            }
            set {
                this._MaxXL = value;
            }
        }
        
        private byte _MinYL;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte MinYL {
            get {
                return this._MinYL;
            }
            set {
                this._MinYL = value;
            }
        }
        
        private byte _MidYL;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte MidYL {
            get {
                return this._MidYL;
            }
            set {
                this._MidYL = value;
            }
        }
        
        private byte _MaxYL;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte MaxYL {
            get {
                return this._MaxYL;
            }
            set {
                this._MaxYL = value;
            }
        }
        
        private byte _MinXR;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte MinXR {
            get {
                return this._MinXR;
            }
            set {
                this._MinXR = value;
            }
        }
        
        private byte _MidXR;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte MidXR {
            get {
                return this._MidXR;
            }
            set {
                this._MidXR = value;
            }
        }
        
        private byte _MaxXR;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte MaxXR {
            get {
                return this._MaxXR;
            }
            set {
                this._MaxXR = value;
            }
        }
        
        private byte _MinYR;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte MinYR {
            get {
                return this._MinYR;
            }
            set {
                this._MinYR = value;
            }
        }
        
        private byte _MidYR;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte MidYR {
            get {
                return this._MidYR;
            }
            set {
                this._MidYR = value;
            }
        }
        
        private byte _MaxYR;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte MaxYR {
            get {
                return this._MaxYR;
            }
            set {
                this._MaxYR = value;
            }
        }
        
        private byte _MinTriggerL;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte MinTriggerL {
            get {
                return this._MinTriggerL;
            }
            set {
                this._MinTriggerL = value;
            }
        }
        
        private byte _MaxTriggerL;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte MaxTriggerL {
            get {
                return this._MaxTriggerL;
            }
            set {
                this._MaxTriggerL = value;
            }
        }
        
        private byte _MinTriggerR;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte MinTriggerR {
            get {
                return this._MinTriggerR;
            }
            set {
                this._MinTriggerR = value;
            }
        }
        
        private byte _MaxTriggerR;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte MaxTriggerR {
            get {
                return this._MaxTriggerR;
            }
            set {
                this._MaxTriggerR = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ClassicControllerCalibrationInfo to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones ClassicControllerCalibrationInfo
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.ClassicControllerCalibrationInfo target0 = new global::WiimoteLib.Proxy.ClassicControllerCalibrationInfo();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ClassicControllerCalibrationInfo to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._MinXL);
            writer.Write(this._MidXL);
            writer.Write(this._MaxXL);
            writer.Write(this._MinYL);
            writer.Write(this._MidYL);
            writer.Write(this._MaxYL);
            writer.Write(this._MinXR);
            writer.Write(this._MidXR);
            writer.Write(this._MaxXR);
            writer.Write(this._MinYR);
            writer.Write(this._MidYR);
            writer.Write(this._MaxYR);
            writer.Write(this._MinTriggerL);
            writer.Write(this._MaxTriggerL);
            writer.Write(this._MinTriggerR);
            writer.Write(this._MaxTriggerR);
        }
        
        /// <summary>
        ///Deserializes ClassicControllerCalibrationInfo
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ClassicControllerCalibrationInfo</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            this._MinXL = reader.ReadByte();
            this._MidXL = reader.ReadByte();
            this._MaxXL = reader.ReadByte();
            this._MinYL = reader.ReadByte();
            this._MidYL = reader.ReadByte();
            this._MaxYL = reader.ReadByte();
            this._MinXR = reader.ReadByte();
            this._MidXR = reader.ReadByte();
            this._MaxXR = reader.ReadByte();
            this._MinYR = reader.ReadByte();
            this._MidYR = reader.ReadByte();
            this._MaxYR = reader.ReadByte();
            this._MinTriggerL = reader.ReadByte();
            this._MaxTriggerL = reader.ReadByte();
            this._MinTriggerR = reader.ReadByte();
            this._MaxTriggerR = reader.ReadByte();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="ClassicControllerButtonState")]
    public struct ClassicControllerButtonState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        private bool _A;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool A {
            get {
                return this._A;
            }
            set {
                this._A = value;
            }
        }
        
        private bool _B;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool B {
            get {
                return this._B;
            }
            set {
                this._B = value;
            }
        }
        
        private bool _Plus;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Plus {
            get {
                return this._Plus;
            }
            set {
                this._Plus = value;
            }
        }
        
        private bool _Home;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Home {
            get {
                return this._Home;
            }
            set {
                this._Home = value;
            }
        }
        
        private bool _Minus;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Minus {
            get {
                return this._Minus;
            }
            set {
                this._Minus = value;
            }
        }
        
        private bool _Up;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Up {
            get {
                return this._Up;
            }
            set {
                this._Up = value;
            }
        }
        
        private bool _Down;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Down {
            get {
                return this._Down;
            }
            set {
                this._Down = value;
            }
        }
        
        private bool _Left;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Left {
            get {
                return this._Left;
            }
            set {
                this._Left = value;
            }
        }
        
        private bool _Right;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Right {
            get {
                return this._Right;
            }
            set {
                this._Right = value;
            }
        }
        
        private bool _X;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool X {
            get {
                return this._X;
            }
            set {
                this._X = value;
            }
        }
        
        private bool _Y;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Y {
            get {
                return this._Y;
            }
            set {
                this._Y = value;
            }
        }
        
        private bool _ZL;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool ZL {
            get {
                return this._ZL;
            }
            set {
                this._ZL = value;
            }
        }
        
        private bool _ZR;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool ZR {
            get {
                return this._ZR;
            }
            set {
                this._ZR = value;
            }
        }
        
        private bool _TriggerL;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool TriggerL {
            get {
                return this._TriggerL;
            }
            set {
                this._TriggerL = value;
            }
        }
        
        private bool _TriggerR;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool TriggerR {
            get {
                return this._TriggerR;
            }
            set {
                this._TriggerR = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ClassicControllerButtonState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones ClassicControllerButtonState
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.ClassicControllerButtonState target0 = new global::WiimoteLib.Proxy.ClassicControllerButtonState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ClassicControllerButtonState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._A);
            writer.Write(this._B);
            writer.Write(this._Plus);
            writer.Write(this._Home);
            writer.Write(this._Minus);
            writer.Write(this._Up);
            writer.Write(this._Down);
            writer.Write(this._Left);
            writer.Write(this._Right);
            writer.Write(this._X);
            writer.Write(this._Y);
            writer.Write(this._ZL);
            writer.Write(this._ZR);
            writer.Write(this._TriggerL);
            writer.Write(this._TriggerR);
        }
        
        /// <summary>
        ///Deserializes ClassicControllerButtonState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ClassicControllerButtonState</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            this._A = reader.ReadBoolean();
            this._B = reader.ReadBoolean();
            this._Plus = reader.ReadBoolean();
            this._Home = reader.ReadBoolean();
            this._Minus = reader.ReadBoolean();
            this._Up = reader.ReadBoolean();
            this._Down = reader.ReadBoolean();
            this._Left = reader.ReadBoolean();
            this._Right = reader.ReadBoolean();
            this._X = reader.ReadBoolean();
            this._Y = reader.ReadBoolean();
            this._ZL = reader.ReadBoolean();
            this._ZR = reader.ReadBoolean();
            this._TriggerL = reader.ReadBoolean();
            this._TriggerR = reader.ReadBoolean();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="GuitarState")]
    public struct GuitarState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        private global::WiimoteLib.Proxy.GuitarType _GuitarType;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.GuitarType GuitarType {
            get {
                return this._GuitarType;
            }
            set {
                this._GuitarType = value;
            }
        }
        
        private global::WiimoteLib.Proxy.GuitarButtonState _ButtonState;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.GuitarButtonState ButtonState {
            get {
                return this._ButtonState;
            }
            set {
                this._ButtonState = value;
            }
        }
        
        private global::WiimoteLib.Proxy.GuitarFretButtonState _FretButtonState;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.GuitarFretButtonState FretButtonState {
            get {
                return this._FretButtonState;
            }
            set {
                this._FretButtonState = value;
            }
        }
        
        private global::WiimoteLib.Proxy.GuitarFretButtonState _TouchbarState;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.GuitarFretButtonState TouchbarState {
            get {
                return this._TouchbarState;
            }
            set {
                this._TouchbarState = value;
            }
        }
        
        private global::WiimoteLib.Proxy.Point _RawJoystick;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.Point RawJoystick {
            get {
                return this._RawJoystick;
            }
            set {
                this._RawJoystick = value;
            }
        }
        
        private global::WiimoteLib.Proxy.PointF _Joystick;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.PointF Joystick {
            get {
                return this._Joystick;
            }
            set {
                this._Joystick = value;
            }
        }
        
        private byte _RawWhammyBar;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte RawWhammyBar {
            get {
                return this._RawWhammyBar;
            }
            set {
                this._RawWhammyBar = value;
            }
        }
        
        private float _WhammyBar;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float WhammyBar {
            get {
                return this._WhammyBar;
            }
            set {
                this._WhammyBar = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current GuitarState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones GuitarState
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.GuitarState target0 = new global::WiimoteLib.Proxy.GuitarState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current GuitarState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._GuitarType)));
            ((Microsoft.Dss.Core.IDssSerializable)(this._ButtonState)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._FretButtonState)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._TouchbarState)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._RawJoystick)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._Joystick)).Serialize(writer);
            writer.Write(this._RawWhammyBar);
            writer.Write(this._WhammyBar);
        }
        
        /// <summary>
        ///Deserializes GuitarState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized GuitarState</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            this._GuitarType = ((global::WiimoteLib.Proxy.GuitarType)(reader.ReadInt32()));
            this._ButtonState = ((global::WiimoteLib.Proxy.GuitarButtonState)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.GuitarButtonState())).Deserialize(reader)));
            this._FretButtonState = ((global::WiimoteLib.Proxy.GuitarFretButtonState)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.GuitarFretButtonState())).Deserialize(reader)));
            this._TouchbarState = ((global::WiimoteLib.Proxy.GuitarFretButtonState)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.GuitarFretButtonState())).Deserialize(reader)));
            this._RawJoystick = ((global::WiimoteLib.Proxy.Point)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.Point())).Deserialize(reader)));
            this._Joystick = ((global::WiimoteLib.Proxy.PointF)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.PointF())).Deserialize(reader)));
            this._RawWhammyBar = reader.ReadByte();
            this._WhammyBar = reader.ReadSingle();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="GuitarButtonState")]
    public struct GuitarButtonState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        private bool _StrumUp;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool StrumUp {
            get {
                return this._StrumUp;
            }
            set {
                this._StrumUp = value;
            }
        }
        
        private bool _StrumDown;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool StrumDown {
            get {
                return this._StrumDown;
            }
            set {
                this._StrumDown = value;
            }
        }
        
        private bool _Minus;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Minus {
            get {
                return this._Minus;
            }
            set {
                this._Minus = value;
            }
        }
        
        private bool _Plus;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Plus {
            get {
                return this._Plus;
            }
            set {
                this._Plus = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current GuitarButtonState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones GuitarButtonState
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.GuitarButtonState target0 = new global::WiimoteLib.Proxy.GuitarButtonState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current GuitarButtonState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._StrumUp);
            writer.Write(this._StrumDown);
            writer.Write(this._Minus);
            writer.Write(this._Plus);
        }
        
        /// <summary>
        ///Deserializes GuitarButtonState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized GuitarButtonState</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            this._StrumUp = reader.ReadBoolean();
            this._StrumDown = reader.ReadBoolean();
            this._Minus = reader.ReadBoolean();
            this._Plus = reader.ReadBoolean();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="GuitarFretButtonState")]
    public struct GuitarFretButtonState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        private bool _Green;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Green {
            get {
                return this._Green;
            }
            set {
                this._Green = value;
            }
        }
        
        private bool _Red;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Red {
            get {
                return this._Red;
            }
            set {
                this._Red = value;
            }
        }
        
        private bool _Yellow;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Yellow {
            get {
                return this._Yellow;
            }
            set {
                this._Yellow = value;
            }
        }
        
        private bool _Blue;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Blue {
            get {
                return this._Blue;
            }
            set {
                this._Blue = value;
            }
        }
        
        private bool _Orange;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Orange {
            get {
                return this._Orange;
            }
            set {
                this._Orange = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current GuitarFretButtonState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones GuitarFretButtonState
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.GuitarFretButtonState target0 = new global::WiimoteLib.Proxy.GuitarFretButtonState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current GuitarFretButtonState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Green);
            writer.Write(this._Red);
            writer.Write(this._Yellow);
            writer.Write(this._Blue);
            writer.Write(this._Orange);
        }
        
        /// <summary>
        ///Deserializes GuitarFretButtonState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized GuitarFretButtonState</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            this._Green = reader.ReadBoolean();
            this._Red = reader.ReadBoolean();
            this._Yellow = reader.ReadBoolean();
            this._Blue = reader.ReadBoolean();
            this._Orange = reader.ReadBoolean();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="DrumsState")]
    public struct DrumsState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        /// <summary>
        ///Copies the data member values of the current DrumsState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones DrumsState
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.DrumsState target0 = new global::WiimoteLib.Proxy.DrumsState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current DrumsState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes DrumsState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized DrumsState</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="LEDState")]
    public struct LEDState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        private bool _LED1;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool LED1 {
            get {
                return this._LED1;
            }
            set {
                this._LED1 = value;
            }
        }
        
        private bool _LED2;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool LED2 {
            get {
                return this._LED2;
            }
            set {
                this._LED2 = value;
            }
        }
        
        private bool _LED3;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool LED3 {
            get {
                return this._LED3;
            }
            set {
                this._LED3 = value;
            }
        }
        
        private bool _LED4;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool LED4 {
            get {
                return this._LED4;
            }
            set {
                this._LED4 = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current LEDState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones LEDState
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.LEDState target0 = new global::WiimoteLib.Proxy.LEDState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current LEDState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._LED1);
            writer.Write(this._LED2);
            writer.Write(this._LED3);
            writer.Write(this._LED4);
        }
        
        /// <summary>
        ///Deserializes LEDState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized LEDState</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            this._LED1 = reader.ReadBoolean();
            this._LED2 = reader.ReadBoolean();
            this._LED3 = reader.ReadBoolean();
            this._LED4 = reader.ReadBoolean();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="RumbleRequest")]
    public struct RumbleRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        private bool _Rumble;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Rumble {
            get {
                return this._Rumble;
            }
            set {
                this._Rumble = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current RumbleRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones RumbleRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.RumbleRequest target0 = new global::WiimoteLib.Proxy.RumbleRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current RumbleRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Rumble);
        }
        
        /// <summary>
        ///Deserializes RumbleRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized RumbleRequest</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            this._Rumble = reader.ReadBoolean();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="BalanceBoardState")]
    public struct BalanceBoardState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        private global::WiimoteLib.Proxy.BalanceBoardCalibrationInfo _CalibrationInfo;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.BalanceBoardCalibrationInfo CalibrationInfo {
            get {
                return this._CalibrationInfo;
            }
            set {
                this._CalibrationInfo = value;
            }
        }
        
        private global::WiimoteLib.Proxy.BalanceBoardSensors _SensorValuesRaw;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.BalanceBoardSensors SensorValuesRaw {
            get {
                return this._SensorValuesRaw;
            }
            set {
                this._SensorValuesRaw = value;
            }
        }
        
        private global::WiimoteLib.Proxy.BalanceBoardSensorsF _SensorValuesKg;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.BalanceBoardSensorsF SensorValuesKg {
            get {
                return this._SensorValuesKg;
            }
            set {
                this._SensorValuesKg = value;
            }
        }
        
        private global::WiimoteLib.Proxy.BalanceBoardSensorsF _SensorValuesLb;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.BalanceBoardSensorsF SensorValuesLb {
            get {
                return this._SensorValuesLb;
            }
            set {
                this._SensorValuesLb = value;
            }
        }
        
        private float _WeightKg;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float WeightKg {
            get {
                return this._WeightKg;
            }
            set {
                this._WeightKg = value;
            }
        }
        
        private float _WeightLb;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float WeightLb {
            get {
                return this._WeightLb;
            }
            set {
                this._WeightLb = value;
            }
        }
        
        private global::WiimoteLib.Proxy.PointF _CenterOfGravity;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.PointF CenterOfGravity {
            get {
                return this._CenterOfGravity;
            }
            set {
                this._CenterOfGravity = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current BalanceBoardState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones BalanceBoardState
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.BalanceBoardState target0 = new global::WiimoteLib.Proxy.BalanceBoardState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current BalanceBoardState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
            ((Microsoft.Dss.Core.IDssSerializable)(this._CalibrationInfo)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._SensorValuesRaw)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._SensorValuesKg)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._SensorValuesLb)).Serialize(writer);
            writer.Write(this._WeightKg);
            writer.Write(this._WeightLb);
            ((Microsoft.Dss.Core.IDssSerializable)(this._CenterOfGravity)).Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes BalanceBoardState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized BalanceBoardState</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            this._CalibrationInfo = ((global::WiimoteLib.Proxy.BalanceBoardCalibrationInfo)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.BalanceBoardCalibrationInfo())).Deserialize(reader)));
            this._SensorValuesRaw = ((global::WiimoteLib.Proxy.BalanceBoardSensors)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.BalanceBoardSensors())).Deserialize(reader)));
            this._SensorValuesKg = ((global::WiimoteLib.Proxy.BalanceBoardSensorsF)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.BalanceBoardSensorsF())).Deserialize(reader)));
            this._SensorValuesLb = ((global::WiimoteLib.Proxy.BalanceBoardSensorsF)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.BalanceBoardSensorsF())).Deserialize(reader)));
            this._WeightKg = reader.ReadSingle();
            this._WeightLb = reader.ReadSingle();
            this._CenterOfGravity = ((global::WiimoteLib.Proxy.PointF)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.PointF())).Deserialize(reader)));
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="BalanceBoardCalibrationInfo")]
    public struct BalanceBoardCalibrationInfo : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        private global::WiimoteLib.Proxy.BalanceBoardSensors _Kg0;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.BalanceBoardSensors Kg0 {
            get {
                return this._Kg0;
            }
            set {
                this._Kg0 = value;
            }
        }
        
        private global::WiimoteLib.Proxy.BalanceBoardSensors _Kg17;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.BalanceBoardSensors Kg17 {
            get {
                return this._Kg17;
            }
            set {
                this._Kg17 = value;
            }
        }
        
        private global::WiimoteLib.Proxy.BalanceBoardSensors _Kg34;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::WiimoteLib.Proxy.BalanceBoardSensors Kg34 {
            get {
                return this._Kg34;
            }
            set {
                this._Kg34 = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current BalanceBoardCalibrationInfo to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones BalanceBoardCalibrationInfo
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.BalanceBoardCalibrationInfo target0 = new global::WiimoteLib.Proxy.BalanceBoardCalibrationInfo();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current BalanceBoardCalibrationInfo to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
            ((Microsoft.Dss.Core.IDssSerializable)(this._Kg0)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._Kg17)).Serialize(writer);
            ((Microsoft.Dss.Core.IDssSerializable)(this._Kg34)).Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes BalanceBoardCalibrationInfo
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized BalanceBoardCalibrationInfo</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            this._Kg0 = ((global::WiimoteLib.Proxy.BalanceBoardSensors)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.BalanceBoardSensors())).Deserialize(reader)));
            this._Kg17 = ((global::WiimoteLib.Proxy.BalanceBoardSensors)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.BalanceBoardSensors())).Deserialize(reader)));
            this._Kg34 = ((global::WiimoteLib.Proxy.BalanceBoardSensors)(((Microsoft.Dss.Core.IDssSerializable)(new global::WiimoteLib.Proxy.BalanceBoardSensors())).Deserialize(reader)));
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="BalanceBoardSensors")]
    public struct BalanceBoardSensors : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        private short _TopRight;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public short TopRight {
            get {
                return this._TopRight;
            }
            set {
                this._TopRight = value;
            }
        }
        
        private short _TopLeft;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public short TopLeft {
            get {
                return this._TopLeft;
            }
            set {
                this._TopLeft = value;
            }
        }
        
        private short _BottomRight;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public short BottomRight {
            get {
                return this._BottomRight;
            }
            set {
                this._BottomRight = value;
            }
        }
        
        private short _BottomLeft;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public short BottomLeft {
            get {
                return this._BottomLeft;
            }
            set {
                this._BottomLeft = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current BalanceBoardSensors to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones BalanceBoardSensors
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.BalanceBoardSensors target0 = new global::WiimoteLib.Proxy.BalanceBoardSensors();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current BalanceBoardSensors to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._TopRight);
            writer.Write(this._TopLeft);
            writer.Write(this._BottomRight);
            writer.Write(this._BottomLeft);
        }
        
        /// <summary>
        ///Deserializes BalanceBoardSensors
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized BalanceBoardSensors</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            this._TopRight = reader.ReadInt16();
            this._TopLeft = reader.ReadInt16();
            this._BottomRight = reader.ReadInt16();
            this._BottomLeft = reader.ReadInt16();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="BalanceBoardSensorsF")]
    public struct BalanceBoardSensorsF : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        private float _TopRight;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float TopRight {
            get {
                return this._TopRight;
            }
            set {
                this._TopRight = value;
            }
        }
        
        private float _TopLeft;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float TopLeft {
            get {
                return this._TopLeft;
            }
            set {
                this._TopLeft = value;
            }
        }
        
        private float _BottomRight;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float BottomRight {
            get {
                return this._BottomRight;
            }
            set {
                this._BottomRight = value;
            }
        }
        
        private float _BottomLeft;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float BottomLeft {
            get {
                return this._BottomLeft;
            }
            set {
                this._BottomLeft = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current BalanceBoardSensorsF to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones BalanceBoardSensorsF
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::WiimoteLib.Proxy.BalanceBoardSensorsF target0 = new global::WiimoteLib.Proxy.BalanceBoardSensorsF();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current BalanceBoardSensorsF to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._TopRight);
            writer.Write(this._TopLeft);
            writer.Write(this._BottomRight);
            writer.Write(this._BottomLeft);
        }
        
        /// <summary>
        ///Deserializes BalanceBoardSensorsF
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized BalanceBoardSensorsF</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            this._TopRight = reader.ReadSingle();
            this._TopLeft = reader.ReadSingle();
            this._BottomRight = reader.ReadSingle();
            this._BottomLeft = reader.ReadSingle();
            return this;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::WiimoteLib.Proxy.WiimoteState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::WiimoteLib.Proxy.WiimoteState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.ComponentModel.DisplayNameAttribute("Subscribe")]
    [global::System.ComponentModel.DescriptionAttribute("Subscribe to Wiimote service notifications.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class WiimoteChanged : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::WiimoteLib.Proxy.WiimoteState, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public WiimoteChanged() {
        }
        
        public WiimoteChanged(global::WiimoteLib.Proxy.WiimoteState body) : 
                base(body) {
        }
        
        public WiimoteChanged(global::WiimoteLib.Proxy.WiimoteState body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.ComponentModel.DisplayNameAttribute("Set Wiimote Leds")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SetLEDs : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::WiimoteLib.Proxy.LEDState, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public SetLEDs() {
        }
        
        public SetLEDs(global::WiimoteLib.Proxy.LEDState body) : 
                base(body) {
        }
        
        public SetLEDs(global::WiimoteLib.Proxy.LEDState body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.ComponentModel.DisplayNameAttribute("Set Wiimote Rumble")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SetRumble : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::WiimoteLib.Proxy.RumbleRequest, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public SetRumble() {
        }
        
        public SetRumble(global::WiimoteLib.Proxy.RumbleRequest body) : 
                base(body) {
        }
        
        public SetRumble(global::WiimoteLib.Proxy.RumbleRequest body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class WiimoteOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: WiimoteLib.Proxy.Get, global:: WiimoteLib.Proxy.Subscribe, global:: WiimoteLib.Proxy.WiimoteChanged, global:: WiimoteLib.Proxy.SetLEDs, global:: WiimoteLib.Proxy.SetRumble> {
        
        public WiimoteOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::WiimoteLib.Proxy.WiimoteState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::WiimoteLib.Proxy.Get operation = new global::WiimoteLib.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::WiimoteLib.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::WiimoteLib.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::WiimoteLib.Proxy.WiimoteState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::WiimoteLib.Proxy.Get operation = new global::WiimoteLib.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::WiimoteLib.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::WiimoteLib.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::WiimoteLib.Proxy.Subscribe operation = new global::WiimoteLib.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::WiimoteLib.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::WiimoteLib.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::WiimoteLib.Proxy.Subscribe operation = new global::WiimoteLib.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::WiimoteLib.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::WiimoteLib.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> WiimoteChanged() {
            global::WiimoteLib.Proxy.WiimoteState body = new global::WiimoteLib.Proxy.WiimoteState();
            global::WiimoteLib.Proxy.WiimoteChanged operation = new global::WiimoteLib.Proxy.WiimoteChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice WiimoteChanged(out global::WiimoteLib.Proxy.WiimoteChanged operation) {
            global::WiimoteLib.Proxy.WiimoteState body = new global::WiimoteLib.Proxy.WiimoteState();
            operation = new global::WiimoteLib.Proxy.WiimoteChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> WiimoteChanged(global::WiimoteLib.Proxy.WiimoteState body) {
            if ((body == null)) {
                body = new global::WiimoteLib.Proxy.WiimoteState();
            }
            global::WiimoteLib.Proxy.WiimoteChanged operation = new global::WiimoteLib.Proxy.WiimoteChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice WiimoteChanged(global::WiimoteLib.Proxy.WiimoteState body, out global::WiimoteLib.Proxy.WiimoteChanged operation) {
            if ((body == null)) {
                body = new global::WiimoteLib.Proxy.WiimoteState();
            }
            operation = new global::WiimoteLib.Proxy.WiimoteChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> SetLEDs() {
            global::WiimoteLib.Proxy.LEDState body = new global::WiimoteLib.Proxy.LEDState();
            global::WiimoteLib.Proxy.SetLEDs operation = new global::WiimoteLib.Proxy.SetLEDs(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetLEDs(out global::WiimoteLib.Proxy.SetLEDs operation) {
            global::WiimoteLib.Proxy.LEDState body = new global::WiimoteLib.Proxy.LEDState();
            operation = new global::WiimoteLib.Proxy.SetLEDs(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> SetLEDs(global::WiimoteLib.Proxy.LEDState body) {
            global::WiimoteLib.Proxy.SetLEDs operation = new global::WiimoteLib.Proxy.SetLEDs(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetLEDs(global::WiimoteLib.Proxy.LEDState body, out global::WiimoteLib.Proxy.SetLEDs operation) {
            operation = new global::WiimoteLib.Proxy.SetLEDs(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> SetRumble() {
            global::WiimoteLib.Proxy.RumbleRequest body = new global::WiimoteLib.Proxy.RumbleRequest();
            global::WiimoteLib.Proxy.SetRumble operation = new global::WiimoteLib.Proxy.SetRumble(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetRumble(out global::WiimoteLib.Proxy.SetRumble operation) {
            global::WiimoteLib.Proxy.RumbleRequest body = new global::WiimoteLib.Proxy.RumbleRequest();
            operation = new global::WiimoteLib.Proxy.SetRumble(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> SetRumble(global::WiimoteLib.Proxy.RumbleRequest body) {
            global::WiimoteLib.Proxy.SetRumble operation = new global::WiimoteLib.Proxy.SetRumble(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetRumble(global::WiimoteLib.Proxy.RumbleRequest body, out global::WiimoteLib.Proxy.SetRumble operation) {
            operation = new global::WiimoteLib.Proxy.SetRumble(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="IRMode")]
    public enum IRMode : byte {
        
        Off = 0,
        
        Basic = 1,
        
        Extended = 3,
        
        Full = 5,
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="ExtensionType")]
    public enum ExtensionType : long {
        
        None = 0,
        
        Nunchuk = 2753560576,
        
        ClassicController = 2753560833,
        
        Guitar = 2753560835,
        
        Drums = 1102265188611,
        
        BalanceBoard = 2753561602,
        
        ParitallyInserted = 281474976710655,
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.tempuri.org/2007/06/wiimote.html", ElementName="GuitarType")]
    public enum GuitarType : int {
        
        GuitarHero3 = 0,
        
        GuitarHeroWorldTour = 1,
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("The Wiimote Service")]
    [global::System.ComponentModel.DisplayNameAttribute("Wiimote")]
    public class Contract {
        
        public const string Identifier = "http://schemas.tempuri.org/2007/06/wiimote.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.tempuri.org/2007/06/wiimote.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.tempuri.org/2007/06/wiimote.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.WiimoteOperations = new global::WiimoteLib.Proxy.WiimoteOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.WiimoteOperations, "http://schemas.tempuri.org/2007/06/wiimote.html", "WiimoteOperations", ""));
        }
        
        public global::WiimoteLib.Proxy.WiimoteOperations WiimoteOperations;
    }
}
