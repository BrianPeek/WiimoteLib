//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml.Serialization;
using W3C.Soap;
using compression = System.IO.Compression;
using constructor = Microsoft.Dss.Services.Constructor;
using contractmanager = Microsoft.Dss.Services.ContractManager;
using contractmodel = Microsoft.Dss.Services.ContractModel;
using io = System.IO;
using reflection = System.Reflection;
using wiimotelib = WiimoteLib.Proxy;


namespace WiimoteLib.Proxy
{
    
    
    /// <summary>
    /// Wiimote Contract
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public sealed class Contract
    {
        
        /// The Unique Contract Identifier for the Wiimote service
        public const String Identifier = "http://schemas.tempuri.org/2007/06/wiimote.html";
        
        /// The Dss Service dssModel Contract(s)
        public static List<contractmodel.ServiceSummary> ServiceModel()
        {
            contractmanager.ServiceSummaryLoader loader = new contractmanager.ServiceSummaryLoader();
            return loader.GetServiceSummaries(typeof(Contract).Assembly);

        }
        
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <param name="partners">Optional list of service partners for new service instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort, params PartnerType[] partners)
        {
            DsspResponsePort<CreateResponse> result = new DsspResponsePort<CreateResponse>();
            ServiceInfoType si = new ServiceInfoType(Contract.Identifier, null);
            if (partners != null)
            {
                si.PartnerList = new List<PartnerType>(partners);
            }
            Microsoft.Dss.Services.Constructor.Create create =
                new Microsoft.Dss.Services.Constructor.Create(si, result);
            contructorServicePort.Post(create);
            return result;

        }
        
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort)
        {
            return Contract.CreateService(contructorServicePort, null);
        }
    }
    
    /// <summary>
    /// Wiimote State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("WiimoteState", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public class WiimoteState : ICloneable, IDssSerializable
    {
        
        private AccelCalibrationInfo _accelCalibrationInfo;
        
        private AccelState _accelState;
        
        private ButtonState _buttonState;
        
        private IRState _iRState;
        
        private Byte _batteryRaw;
        
        private Single _battery;
        
        private Boolean _rumble;
        
        private Boolean _extension;
        
        private ExtensionType _extensionType;
        
        private NunchukState _nunchukState;
        
        private ClassicControllerState _classicControllerState;
        
        private GuitarState _guitarState;
        
        private LEDState _lEDState;
        
        /// <summary>
        /// Accel Calibration Info
        /// </summary>
        [DataMember()]
        public AccelCalibrationInfo AccelCalibrationInfo
        {
            get
            {
                return this._accelCalibrationInfo;
            }
            set
            {
                this._accelCalibrationInfo = value;
            }
        }
        
        /// <summary>
        /// Accel State
        /// </summary>
        [DataMember()]
        public AccelState AccelState
        {
            get
            {
                return this._accelState;
            }
            set
            {
                this._accelState = value;
            }
        }
        
        /// <summary>
        /// Button State
        /// </summary>
        [DataMember()]
        public ButtonState ButtonState
        {
            get
            {
                return this._buttonState;
            }
            set
            {
                this._buttonState = value;
            }
        }
        
        /// <summary>
        /// IR State
        /// </summary>
        [DataMember()]
        public IRState IRState
        {
            get
            {
                return this._iRState;
            }
            set
            {
                this._iRState = value;
            }
        }
        
        /// <summary>
        /// Battery Raw
        /// </summary>
        [DataMember()]
        public Byte BatteryRaw
        {
            get
            {
                return this._batteryRaw;
            }
            set
            {
                this._batteryRaw = value;
            }
        }
        
        /// <summary>
        /// Battery
        /// </summary>
        [DataMember()]
        public Single Battery
        {
            get
            {
                return this._battery;
            }
            set
            {
                this._battery = value;
            }
        }
        
        /// <summary>
        /// Rumble
        /// </summary>
        [DataMember()]
        public Boolean Rumble
        {
            get
            {
                return this._rumble;
            }
            set
            {
                this._rumble = value;
            }
        }
        
        /// <summary>
        /// Extension
        /// </summary>
        [DataMember()]
        public Boolean Extension
        {
            get
            {
                return this._extension;
            }
            set
            {
                this._extension = value;
            }
        }
        
        /// <summary>
        /// Extension Type
        /// </summary>
        [DataMember()]
        public ExtensionType ExtensionType
        {
            get
            {
                return this._extensionType;
            }
            set
            {
                this._extensionType = value;
            }
        }
        
        /// <summary>
        /// Nunchuk State
        /// </summary>
        [DataMember()]
        public NunchukState NunchukState
        {
            get
            {
                return this._nunchukState;
            }
            set
            {
                this._nunchukState = value;
            }
        }
        
        /// <summary>
        /// Classic Controller State
        /// </summary>
        [DataMember()]
        public ClassicControllerState ClassicControllerState
        {
            get
            {
                return this._classicControllerState;
            }
            set
            {
                this._classicControllerState = value;
            }
        }
        
        /// <summary>
        /// Guitar State
        /// </summary>
        [DataMember()]
        public GuitarState GuitarState
        {
            get
            {
                return this._guitarState;
            }
            set
            {
                this._guitarState = value;
            }
        }
        
        /// <summary>
        /// LED State
        /// </summary>
        [DataMember()]
        public LEDState LEDState
        {
            get
            {
                return this._lEDState;
            }
            set
            {
                this._lEDState = value;
            }
        }
        
        /// <summary>
        /// Copy To Wiimote State
        /// </summary>
        public virtual void CopyTo(IDssSerializable target)
        {
            WiimoteState typedTarget = target as WiimoteState;

            if (typedTarget == null)
                throw new ArgumentException("CopyTo({0}) requires type {0}", this.GetType().FullName);
            typedTarget.AccelCalibrationInfo = this.AccelCalibrationInfo;
            typedTarget.AccelState = this.AccelState;
            typedTarget.ButtonState = this.ButtonState;
            typedTarget.IRState = this.IRState;
            typedTarget.BatteryRaw = this.BatteryRaw;
            typedTarget.Battery = this.Battery;
            typedTarget.Rumble = this.Rumble;
            typedTarget.Extension = this.Extension;
            typedTarget.ExtensionType = this.ExtensionType;
            typedTarget.NunchukState = this.NunchukState;
            typedTarget.ClassicControllerState = this.ClassicControllerState;
            typedTarget.GuitarState = this.GuitarState;
            typedTarget.LEDState = this.LEDState;
        }
        
        /// <summary>
        /// Clone Wiimote State
        /// </summary>
        public virtual object Clone()
        {
            WiimoteState target = new WiimoteState();

            target.AccelCalibrationInfo = this.AccelCalibrationInfo;
            target.AccelState = this.AccelState;
            target.ButtonState = this.ButtonState;
            target.IRState = this.IRState;
            target.BatteryRaw = this.BatteryRaw;
            target.Battery = this.Battery;
            target.Rumble = this.Rumble;
            target.Extension = this.Extension;
            target.ExtensionType = this.ExtensionType;
            target.NunchukState = this.NunchukState;
            target.ClassicControllerState = this.ClassicControllerState;
            target.GuitarState = this.GuitarState;
            target.LEDState = this.LEDState;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public virtual void Serialize(System.IO.BinaryWriter writer)
        {
            ((Microsoft.Dss.Core.IDssSerializable)AccelCalibrationInfo).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)AccelState).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)ButtonState).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)IRState).Serialize(writer);

            writer.Write(BatteryRaw);

            writer.Write(Battery);

            writer.Write(Rumble);

            writer.Write(Extension);

            writer.Write((System.Int32)ExtensionType);

            ((Microsoft.Dss.Core.IDssSerializable)NunchukState).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)ClassicControllerState).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)GuitarState).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)LEDState).Serialize(writer);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public virtual object Deserialize(System.IO.BinaryReader reader)
        {
            AccelCalibrationInfo = (AccelCalibrationInfo)((Microsoft.Dss.Core.IDssSerializable)new AccelCalibrationInfo()).Deserialize(reader);

            AccelState = (AccelState)((Microsoft.Dss.Core.IDssSerializable)new AccelState()).Deserialize(reader);

            ButtonState = (ButtonState)((Microsoft.Dss.Core.IDssSerializable)new ButtonState()).Deserialize(reader);

            IRState = (IRState)((Microsoft.Dss.Core.IDssSerializable)new IRState()).Deserialize(reader);

            BatteryRaw = reader.ReadByte();

            Battery = reader.ReadSingle();

            Rumble = reader.ReadBoolean();

            Extension = reader.ReadBoolean();

            ExtensionType = (ExtensionType)reader.ReadInt32();

            NunchukState = (NunchukState)((Microsoft.Dss.Core.IDssSerializable)new NunchukState()).Deserialize(reader);

            ClassicControllerState = (ClassicControllerState)((Microsoft.Dss.Core.IDssSerializable)new ClassicControllerState()).Deserialize(reader);

            GuitarState = (GuitarState)((Microsoft.Dss.Core.IDssSerializable)new GuitarState()).Deserialize(reader);

            LEDState = (LEDState)((Microsoft.Dss.Core.IDssSerializable)new LEDState()).Deserialize(reader);

            return this;

        }
    }
    
    /// <summary>
    /// LED State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("LEDState", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct LEDState : ICloneable, IDssSerializable
    {
        
        private Boolean _lED1;
        
        private Boolean _lED2;
        
        private Boolean _lED3;
        
        private Boolean _lED4;
        
        /// <summary>
        /// LED1
        /// </summary>
        [DataMember()]
        public Boolean LED1
        {
            get
            {
                return this._lED1;
            }
            set
            {
                this._lED1 = value;
            }
        }
        
        /// <summary>
        /// LED2
        /// </summary>
        [DataMember()]
        public Boolean LED2
        {
            get
            {
                return this._lED2;
            }
            set
            {
                this._lED2 = value;
            }
        }
        
        /// <summary>
        /// LED3
        /// </summary>
        [DataMember()]
        public Boolean LED3
        {
            get
            {
                return this._lED3;
            }
            set
            {
                this._lED3 = value;
            }
        }
        
        /// <summary>
        /// LED4
        /// </summary>
        [DataMember()]
        public Boolean LED4
        {
            get
            {
                return this._lED4;
            }
            set
            {
                this._lED4 = value;
            }
        }
        
        /// <summary>
        /// Copy To LED State
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone LED State
        /// </summary>
        public object Clone()
        {
            LEDState target = new LEDState();

            target.LED1 = this.LED1;
            target.LED2 = this.LED2;
            target.LED3 = this.LED3;
            target.LED4 = this.LED4;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(LED1);

            writer.Write(LED2);

            writer.Write(LED3);

            writer.Write(LED4);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            LED1 = reader.ReadBoolean();

            LED2 = reader.ReadBoolean();

            LED3 = reader.ReadBoolean();

            LED4 = reader.ReadBoolean();

            return this;

        }
    }
    
    /// <summary>
    /// Rumble Request
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("RumbleRequest", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct RumbleRequest : ICloneable, IDssSerializable
    {
        
        private Boolean _rumble;
        
        /// <summary>
        /// Rumble
        /// </summary>
        [DataMember()]
        public Boolean Rumble
        {
            get
            {
                return this._rumble;
            }
            set
            {
                this._rumble = value;
            }
        }
        
        /// <summary>
        /// Copy To Rumble Request
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Rumble Request
        /// </summary>
        public object Clone()
        {
            RumbleRequest target = new RumbleRequest();

            target.Rumble = this.Rumble;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(Rumble);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            Rumble = reader.ReadBoolean();

            return this;

        }
    }
    
    /// <summary>
    /// Extension Type
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("ExtensionType", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public enum ExtensionType
    {
        
        /// <summary>
        /// None
        /// </summary>
        None = 0,
        
        /// <summary>
        /// Nunchuk
        /// </summary>
        Nunchuk = 65278,
        
        /// <summary>
        /// Classic Controller
        /// </summary>
        ClassicController = 65021,
        
        /// <summary>
        /// Guitar
        /// </summary>
        Guitar = 65019,
        
        /// <summary>
        /// Balance Board
        /// </summary>
        BalanceBoard = 1026,
        
        /// <summary>
        /// Paritally Inserted
        /// </summary>
        ParitallyInserted = 65535,
    }
    
    /// <summary>
    /// PointF
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("PointF", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct PointF : ICloneable, IDssSerializable
    {
        
        private Single _x;
        
        private Single _y;
        
        /// <summary>
        /// X
        /// </summary>
        [DataMember()]
        public Single X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
            }
        }
        
        /// <summary>
        /// Y
        /// </summary>
        [DataMember()]
        public Single Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
            }
        }
        
        /// <summary>
        /// Copy To PointF
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone PointF
        /// </summary>
        public object Clone()
        {
            PointF target = new PointF();

            target.X = this.X;
            target.Y = this.Y;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(X);

            writer.Write(Y);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            X = reader.ReadSingle();

            Y = reader.ReadSingle();

            return this;

        }
    }
    
    /// <summary>
    /// Point
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("Point", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct Point : ICloneable, IDssSerializable
    {
        
        private Int32 _x;
        
        private Int32 _y;
        
        /// <summary>
        /// X
        /// </summary>
        [DataMember()]
        public Int32 X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
            }
        }
        
        /// <summary>
        /// Y
        /// </summary>
        [DataMember()]
        public Int32 Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
            }
        }
        
        /// <summary>
        /// Copy To Point
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Point
        /// </summary>
        public object Clone()
        {
            Point target = new Point();

            target.X = this.X;
            target.Y = this.Y;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(X);

            writer.Write(Y);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            X = reader.ReadInt32();

            Y = reader.ReadInt32();

            return this;

        }
    }
    
    /// <summary>
    /// Point3F
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("Point3F", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct Point3F : ICloneable, IDssSerializable
    {
        
        private Single _x;
        
        private Single _y;
        
        private Single _z;
        
        /// <summary>
        /// X
        /// </summary>
        [DataMember()]
        public Single X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
            }
        }
        
        /// <summary>
        /// Y
        /// </summary>
        [DataMember()]
        public Single Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
            }
        }
        
        /// <summary>
        /// Z
        /// </summary>
        [DataMember()]
        public Single Z
        {
            get
            {
                return this._z;
            }
            set
            {
                this._z = value;
            }
        }
        
        /// <summary>
        /// Copy To Point3F
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Point3F
        /// </summary>
        public object Clone()
        {
            Point3F target = new Point3F();

            target.X = this.X;
            target.Y = this.Y;
            target.Z = this.Z;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(X);

            writer.Write(Y);

            writer.Write(Z);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            X = reader.ReadSingle();

            Y = reader.ReadSingle();

            Z = reader.ReadSingle();

            return this;

        }
    }
    
    /// <summary>
    /// Point3
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("Point3", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct Point3 : ICloneable, IDssSerializable
    {
        
        private Int32 _x;
        
        private Int32 _y;
        
        private Int32 _z;
        
        /// <summary>
        /// X
        /// </summary>
        [DataMember()]
        public Int32 X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
            }
        }
        
        /// <summary>
        /// Y
        /// </summary>
        [DataMember()]
        public Int32 Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
            }
        }
        
        /// <summary>
        /// Z
        /// </summary>
        [DataMember()]
        public Int32 Z
        {
            get
            {
                return this._z;
            }
            set
            {
                this._z = value;
            }
        }
        
        /// <summary>
        /// Copy To Point3
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Point3
        /// </summary>
        public object Clone()
        {
            Point3 target = new Point3();

            target.X = this.X;
            target.Y = this.Y;
            target.Z = this.Z;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(X);

            writer.Write(Y);

            writer.Write(Z);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            X = reader.ReadInt32();

            Y = reader.ReadInt32();

            Z = reader.ReadInt32();

            return this;

        }
    }
    
    /// <summary>
    /// Accel Calibration Info
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("AccelCalibrationInfo", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct AccelCalibrationInfo : ICloneable, IDssSerializable
    {
        
        private Byte _x0;
        
        private Byte _y0;
        
        private Byte _z0;
        
        private Byte _xG;
        
        private Byte _yG;
        
        private Byte _zG;
        
        /// <summary>
        /// X0
        /// </summary>
        [DataMember()]
        public Byte X0
        {
            get
            {
                return this._x0;
            }
            set
            {
                this._x0 = value;
            }
        }
        
        /// <summary>
        /// Y0
        /// </summary>
        [DataMember()]
        public Byte Y0
        {
            get
            {
                return this._y0;
            }
            set
            {
                this._y0 = value;
            }
        }
        
        /// <summary>
        /// Z0
        /// </summary>
        [DataMember()]
        public Byte Z0
        {
            get
            {
                return this._z0;
            }
            set
            {
                this._z0 = value;
            }
        }
        
        /// <summary>
        /// XG
        /// </summary>
        [DataMember()]
        public Byte XG
        {
            get
            {
                return this._xG;
            }
            set
            {
                this._xG = value;
            }
        }
        
        /// <summary>
        /// YG
        /// </summary>
        [DataMember()]
        public Byte YG
        {
            get
            {
                return this._yG;
            }
            set
            {
                this._yG = value;
            }
        }
        
        /// <summary>
        /// ZG
        /// </summary>
        [DataMember()]
        public Byte ZG
        {
            get
            {
                return this._zG;
            }
            set
            {
                this._zG = value;
            }
        }
        
        /// <summary>
        /// Copy To Accel Calibration Info
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Accel Calibration Info
        /// </summary>
        public object Clone()
        {
            AccelCalibrationInfo target = new AccelCalibrationInfo();

            target.X0 = this.X0;
            target.Y0 = this.Y0;
            target.Z0 = this.Z0;
            target.XG = this.XG;
            target.YG = this.YG;
            target.ZG = this.ZG;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(X0);

            writer.Write(Y0);

            writer.Write(Z0);

            writer.Write(XG);

            writer.Write(YG);

            writer.Write(ZG);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            X0 = reader.ReadByte();

            Y0 = reader.ReadByte();

            Z0 = reader.ReadByte();

            XG = reader.ReadByte();

            YG = reader.ReadByte();

            ZG = reader.ReadByte();

            return this;

        }
    }
    
    /// <summary>
    /// Accel State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("AccelState", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct AccelState : ICloneable, IDssSerializable
    {
        
        private Point3 _rawValues;
        
        private Point3F _values;
        
        /// <summary>
        /// Raw Values
        /// </summary>
        [DataMember()]
        public Point3 RawValues
        {
            get
            {
                return this._rawValues;
            }
            set
            {
                this._rawValues = value;
            }
        }
        
        /// <summary>
        /// Values
        /// </summary>
        [DataMember()]
        public Point3F Values
        {
            get
            {
                return this._values;
            }
            set
            {
                this._values = value;
            }
        }
        
        /// <summary>
        /// Copy To Accel State
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Accel State
        /// </summary>
        public object Clone()
        {
            AccelState target = new AccelState();

            target.RawValues = this.RawValues;
            target.Values = this.Values;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            ((Microsoft.Dss.Core.IDssSerializable)RawValues).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)Values).Serialize(writer);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            RawValues = (Point3)((Microsoft.Dss.Core.IDssSerializable)new Point3()).Deserialize(reader);

            Values = (Point3F)((Microsoft.Dss.Core.IDssSerializable)new Point3F()).Deserialize(reader);

            return this;

        }
    }
    
    /// <summary>
    /// Button State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("ButtonState", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct ButtonState : ICloneable, IDssSerializable
    {
        
        private Boolean _a;
        
        private Boolean _b;
        
        private Boolean _plus;
        
        private Boolean _home;
        
        private Boolean _minus;
        
        private Boolean _one;
        
        private Boolean _two;
        
        private Boolean _up;
        
        private Boolean _down;
        
        private Boolean _left;
        
        private Boolean _right;
        
        /// <summary>
        /// A
        /// </summary>
        [DataMember()]
        public Boolean A
        {
            get
            {
                return this._a;
            }
            set
            {
                this._a = value;
            }
        }
        
        /// <summary>
        /// B
        /// </summary>
        [DataMember()]
        public Boolean B
        {
            get
            {
                return this._b;
            }
            set
            {
                this._b = value;
            }
        }
        
        /// <summary>
        /// Plus
        /// </summary>
        [DataMember()]
        public Boolean Plus
        {
            get
            {
                return this._plus;
            }
            set
            {
                this._plus = value;
            }
        }
        
        /// <summary>
        /// Home
        /// </summary>
        [DataMember()]
        public Boolean Home
        {
            get
            {
                return this._home;
            }
            set
            {
                this._home = value;
            }
        }
        
        /// <summary>
        /// Minus
        /// </summary>
        [DataMember()]
        public Boolean Minus
        {
            get
            {
                return this._minus;
            }
            set
            {
                this._minus = value;
            }
        }
        
        /// <summary>
        /// One
        /// </summary>
        [DataMember()]
        public Boolean One
        {
            get
            {
                return this._one;
            }
            set
            {
                this._one = value;
            }
        }
        
        /// <summary>
        /// Two
        /// </summary>
        [DataMember()]
        public Boolean Two
        {
            get
            {
                return this._two;
            }
            set
            {
                this._two = value;
            }
        }
        
        /// <summary>
        /// Up
        /// </summary>
        [DataMember()]
        public Boolean Up
        {
            get
            {
                return this._up;
            }
            set
            {
                this._up = value;
            }
        }
        
        /// <summary>
        /// Down
        /// </summary>
        [DataMember()]
        public Boolean Down
        {
            get
            {
                return this._down;
            }
            set
            {
                this._down = value;
            }
        }
        
        /// <summary>
        /// Left
        /// </summary>
        [DataMember()]
        public Boolean Left
        {
            get
            {
                return this._left;
            }
            set
            {
                this._left = value;
            }
        }
        
        /// <summary>
        /// Right
        /// </summary>
        [DataMember()]
        public Boolean Right
        {
            get
            {
                return this._right;
            }
            set
            {
                this._right = value;
            }
        }
        
        /// <summary>
        /// Copy To Button State
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Button State
        /// </summary>
        public object Clone()
        {
            ButtonState target = new ButtonState();

            target.A = this.A;
            target.B = this.B;
            target.Plus = this.Plus;
            target.Home = this.Home;
            target.Minus = this.Minus;
            target.One = this.One;
            target.Two = this.Two;
            target.Up = this.Up;
            target.Down = this.Down;
            target.Left = this.Left;
            target.Right = this.Right;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(A);

            writer.Write(B);

            writer.Write(Plus);

            writer.Write(Home);

            writer.Write(Minus);

            writer.Write(One);

            writer.Write(Two);

            writer.Write(Up);

            writer.Write(Down);

            writer.Write(Left);

            writer.Write(Right);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            A = reader.ReadBoolean();

            B = reader.ReadBoolean();

            Plus = reader.ReadBoolean();

            Home = reader.ReadBoolean();

            Minus = reader.ReadBoolean();

            One = reader.ReadBoolean();

            Two = reader.ReadBoolean();

            Up = reader.ReadBoolean();

            Down = reader.ReadBoolean();

            Left = reader.ReadBoolean();

            Right = reader.ReadBoolean();

            return this;

        }
    }
    
    /// <summary>
    /// IR State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("IRState", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct IRState : ICloneable, IDssSerializable
    {
        
        private IRMode _mode;
        
        private IRSensor[] _iRSensors;
        
        private Point _rawMidpoint;
        
        private PointF _midpoint;
        
        /// <summary>
        /// Mode
        /// </summary>
        [DataMember()]
        public IRMode Mode
        {
            get
            {
                return this._mode;
            }
            set
            {
                this._mode = value;
            }
        }
        
        /// <summary>
        /// IR Sensors
        /// </summary>
        [DataMember()]
        public IRSensor[] IRSensors
        {
            get
            {
                return this._iRSensors;
            }
            set
            {
                this._iRSensors = value;
            }
        }
        
        /// <summary>
        /// Raw Midpoint
        /// </summary>
        [DataMember()]
        public Point RawMidpoint
        {
            get
            {
                return this._rawMidpoint;
            }
            set
            {
                this._rawMidpoint = value;
            }
        }
        
        /// <summary>
        /// Midpoint
        /// </summary>
        [DataMember()]
        public PointF Midpoint
        {
            get
            {
                return this._midpoint;
            }
            set
            {
                this._midpoint = value;
            }
        }
        
        /// <summary>
        /// Copy To IR State
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone IR State
        /// </summary>
        public object Clone()
        {
            IRState target = new IRState();

            target.Mode = this.Mode;

            // copy IRSensor[] IRSensors
            if (this.IRSensors != null)
            {
                target.IRSensors = new IRSensor[this.IRSensors.GetLength(0)];
                for (int d0 = 0; d0 < this.IRSensors.GetLength(0); d0++)
                    target.IRSensors[d0] = (IRSensor)((Microsoft.Dss.Core.IDssSerializable)this.IRSensors[d0]).Clone();
            }
            target.RawMidpoint = this.RawMidpoint;
            target.Midpoint = this.Midpoint;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write((System.Byte)Mode);

            if (IRSensors == null) writer.Write((byte)0);
            else
            {
                // null flag
                writer.Write((byte)1);

                // Dimensions
                writer.Write(1);

                // Elements per dimension
                writer.Write(this.IRSensors.GetLength(0));

                for(int d0 = 0; d0 < this.IRSensors.GetLength(0); d0++)
                {
                    ((Microsoft.Dss.Core.IDssSerializable)IRSensors[d0]).Serialize(writer);
                }
            }

            ((Microsoft.Dss.Core.IDssSerializable)RawMidpoint).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)Midpoint).Serialize(writer);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            Mode = (IRMode)reader.ReadByte();

            if (reader.ReadByte() == 0) {}
            else
            {
                // Dimensions
                int dims_count2734026764 = reader.ReadInt32();

                // Elements per dimension
                int[] count2734026764 = new int[dims_count2734026764];
                for(int ix = 0; ix < dims_count2734026764; ix++)
                    count2734026764[ix] = reader.ReadInt32();

                IRSensors = new IRSensor[count2734026764[0]];
                for(int d0 = 0; d0 < count2734026764[0]; d0++)
                {
                    IRSensors[d0] = (IRSensor)((Microsoft.Dss.Core.IDssSerializable)new IRSensor()).Deserialize(reader);
                }
            } //nullable

            RawMidpoint = (Point)((Microsoft.Dss.Core.IDssSerializable)new Point()).Deserialize(reader);

            Midpoint = (PointF)((Microsoft.Dss.Core.IDssSerializable)new PointF()).Deserialize(reader);

            return this;

        }
    }
    
    /// <summary>
    /// IR Mode
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("IRMode", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public enum IRMode
    {
        
        /// <summary>
        /// Off
        /// </summary>
        Off = 0,
        
        /// <summary>
        /// Basic
        /// </summary>
        Basic = 1,
        
        /// <summary>
        /// Extended
        /// </summary>
        Extended = 3,
        
        /// <summary>
        /// Full
        /// </summary>
        Full = 5,
    }
    
    /// <summary>
    /// IR Sensor
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("IRSensor", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct IRSensor : ICloneable, IDssSerializable
    {
        
        private Point _rawPosition;
        
        private PointF _position;
        
        private Int32 _size;
        
        private Boolean _found;
        
        /// <summary>
        /// Raw Position
        /// </summary>
        [DataMember()]
        public Point RawPosition
        {
            get
            {
                return this._rawPosition;
            }
            set
            {
                this._rawPosition = value;
            }
        }
        
        /// <summary>
        /// Position
        /// </summary>
        [DataMember()]
        public PointF Position
        {
            get
            {
                return this._position;
            }
            set
            {
                this._position = value;
            }
        }
        
        /// <summary>
        /// Size
        /// </summary>
        [DataMember()]
        public Int32 Size
        {
            get
            {
                return this._size;
            }
            set
            {
                this._size = value;
            }
        }
        
        /// <summary>
        /// Found
        /// </summary>
        [DataMember()]
        public Boolean Found
        {
            get
            {
                return this._found;
            }
            set
            {
                this._found = value;
            }
        }
        
        /// <summary>
        /// Copy To IR Sensor
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone IR Sensor
        /// </summary>
        public object Clone()
        {
            IRSensor target = new IRSensor();

            target.RawPosition = this.RawPosition;
            target.Position = this.Position;
            target.Size = this.Size;
            target.Found = this.Found;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            ((Microsoft.Dss.Core.IDssSerializable)RawPosition).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)Position).Serialize(writer);

            writer.Write(Size);

            writer.Write(Found);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            RawPosition = (Point)((Microsoft.Dss.Core.IDssSerializable)new Point()).Deserialize(reader);

            Position = (PointF)((Microsoft.Dss.Core.IDssSerializable)new PointF()).Deserialize(reader);

            Size = reader.ReadInt32();

            Found = reader.ReadBoolean();

            return this;

        }
    }
    
    /// <summary>
    /// Nunchuk State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("NunchukState", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct NunchukState : ICloneable, IDssSerializable
    {
        
        private NunchukCalibrationInfo _calibrationInfo;
        
        private AccelState _accelState;
        
        private Point _rawJoystick;
        
        private PointF _joystick;
        
        private Boolean _c;
        
        private Boolean _z;
        
        /// <summary>
        /// Calibration Info
        /// </summary>
        [DataMember()]
        public NunchukCalibrationInfo CalibrationInfo
        {
            get
            {
                return this._calibrationInfo;
            }
            set
            {
                this._calibrationInfo = value;
            }
        }
        
        /// <summary>
        /// Accel State
        /// </summary>
        [DataMember()]
        public AccelState AccelState
        {
            get
            {
                return this._accelState;
            }
            set
            {
                this._accelState = value;
            }
        }
        
        /// <summary>
        /// Raw Joystick
        /// </summary>
        [DataMember()]
        public Point RawJoystick
        {
            get
            {
                return this._rawJoystick;
            }
            set
            {
                this._rawJoystick = value;
            }
        }
        
        /// <summary>
        /// Joystick
        /// </summary>
        [DataMember()]
        public PointF Joystick
        {
            get
            {
                return this._joystick;
            }
            set
            {
                this._joystick = value;
            }
        }
        
        /// <summary>
        /// C
        /// </summary>
        [DataMember()]
        public Boolean C
        {
            get
            {
                return this._c;
            }
            set
            {
                this._c = value;
            }
        }
        
        /// <summary>
        /// Z
        /// </summary>
        [DataMember()]
        public Boolean Z
        {
            get
            {
                return this._z;
            }
            set
            {
                this._z = value;
            }
        }
        
        /// <summary>
        /// Copy To Nunchuk State
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Nunchuk State
        /// </summary>
        public object Clone()
        {
            NunchukState target = new NunchukState();

            target.CalibrationInfo = this.CalibrationInfo;
            target.AccelState = this.AccelState;
            target.RawJoystick = this.RawJoystick;
            target.Joystick = this.Joystick;
            target.C = this.C;
            target.Z = this.Z;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            ((Microsoft.Dss.Core.IDssSerializable)CalibrationInfo).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)AccelState).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)RawJoystick).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)Joystick).Serialize(writer);

            writer.Write(C);

            writer.Write(Z);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            CalibrationInfo = (NunchukCalibrationInfo)((Microsoft.Dss.Core.IDssSerializable)new NunchukCalibrationInfo()).Deserialize(reader);

            AccelState = (AccelState)((Microsoft.Dss.Core.IDssSerializable)new AccelState()).Deserialize(reader);

            RawJoystick = (Point)((Microsoft.Dss.Core.IDssSerializable)new Point()).Deserialize(reader);

            Joystick = (PointF)((Microsoft.Dss.Core.IDssSerializable)new PointF()).Deserialize(reader);

            C = reader.ReadBoolean();

            Z = reader.ReadBoolean();

            return this;

        }
    }
    
    /// <summary>
    /// Nunchuk Calibration Info
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("NunchukCalibrationInfo", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct NunchukCalibrationInfo : ICloneable, IDssSerializable
    {
        
        private Byte _minX;
        
        private Byte _midX;
        
        private Byte _maxX;
        
        private Byte _minY;
        
        private Byte _midY;
        
        private Byte _maxY;
        
        /// <summary>
        /// MinX
        /// </summary>
        [DataMember()]
        public Byte MinX
        {
            get
            {
                return this._minX;
            }
            set
            {
                this._minX = value;
            }
        }
        
        /// <summary>
        /// MidX
        /// </summary>
        [DataMember()]
        public Byte MidX
        {
            get
            {
                return this._midX;
            }
            set
            {
                this._midX = value;
            }
        }
        
        /// <summary>
        /// MaxX
        /// </summary>
        [DataMember()]
        public Byte MaxX
        {
            get
            {
                return this._maxX;
            }
            set
            {
                this._maxX = value;
            }
        }
        
        /// <summary>
        /// MinY
        /// </summary>
        [DataMember()]
        public Byte MinY
        {
            get
            {
                return this._minY;
            }
            set
            {
                this._minY = value;
            }
        }
        
        /// <summary>
        /// MidY
        /// </summary>
        [DataMember()]
        public Byte MidY
        {
            get
            {
                return this._midY;
            }
            set
            {
                this._midY = value;
            }
        }
        
        /// <summary>
        /// MaxY
        /// </summary>
        [DataMember()]
        public Byte MaxY
        {
            get
            {
                return this._maxY;
            }
            set
            {
                this._maxY = value;
            }
        }
        
        /// <summary>
        /// Copy To Nunchuk Calibration Info
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Nunchuk Calibration Info
        /// </summary>
        public object Clone()
        {
            NunchukCalibrationInfo target = new NunchukCalibrationInfo();

            target.MinX = this.MinX;
            target.MidX = this.MidX;
            target.MaxX = this.MaxX;
            target.MinY = this.MinY;
            target.MidY = this.MidY;
            target.MaxY = this.MaxY;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(MinX);

            writer.Write(MidX);

            writer.Write(MaxX);

            writer.Write(MinY);

            writer.Write(MidY);

            writer.Write(MaxY);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            MinX = reader.ReadByte();

            MidX = reader.ReadByte();

            MaxX = reader.ReadByte();

            MinY = reader.ReadByte();

            MidY = reader.ReadByte();

            MaxY = reader.ReadByte();

            return this;

        }
    }
    
    /// <summary>
    /// Classic Controller State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("ClassicControllerState", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct ClassicControllerState : ICloneable, IDssSerializable
    {
        
        private ClassicControllerCalibrationInfo _calibrationInfo;
        
        private ClassicControllerButtonState _buttonState;
        
        private Point _rawJoystickL;
        
        private Point _rawJoystickR;
        
        private PointF _joystickL;
        
        private PointF _joystickR;
        
        private Byte _rawTriggerL;
        
        private Byte _rawTriggerR;
        
        private Single _triggerL;
        
        private Single _triggerR;
        
        /// <summary>
        /// Calibration Info
        /// </summary>
        [DataMember()]
        public ClassicControllerCalibrationInfo CalibrationInfo
        {
            get
            {
                return this._calibrationInfo;
            }
            set
            {
                this._calibrationInfo = value;
            }
        }
        
        /// <summary>
        /// Button State
        /// </summary>
        [DataMember()]
        public ClassicControllerButtonState ButtonState
        {
            get
            {
                return this._buttonState;
            }
            set
            {
                this._buttonState = value;
            }
        }
        
        /// <summary>
        /// Raw JoystickL
        /// </summary>
        [DataMember()]
        public Point RawJoystickL
        {
            get
            {
                return this._rawJoystickL;
            }
            set
            {
                this._rawJoystickL = value;
            }
        }
        
        /// <summary>
        /// Raw JoystickR
        /// </summary>
        [DataMember()]
        public Point RawJoystickR
        {
            get
            {
                return this._rawJoystickR;
            }
            set
            {
                this._rawJoystickR = value;
            }
        }
        
        /// <summary>
        /// JoystickL
        /// </summary>
        [DataMember()]
        public PointF JoystickL
        {
            get
            {
                return this._joystickL;
            }
            set
            {
                this._joystickL = value;
            }
        }
        
        /// <summary>
        /// JoystickR
        /// </summary>
        [DataMember()]
        public PointF JoystickR
        {
            get
            {
                return this._joystickR;
            }
            set
            {
                this._joystickR = value;
            }
        }
        
        /// <summary>
        /// Raw TriggerL
        /// </summary>
        [DataMember()]
        public Byte RawTriggerL
        {
            get
            {
                return this._rawTriggerL;
            }
            set
            {
                this._rawTriggerL = value;
            }
        }
        
        /// <summary>
        /// Raw TriggerR
        /// </summary>
        [DataMember()]
        public Byte RawTriggerR
        {
            get
            {
                return this._rawTriggerR;
            }
            set
            {
                this._rawTriggerR = value;
            }
        }
        
        /// <summary>
        /// TriggerL
        /// </summary>
        [DataMember()]
        public Single TriggerL
        {
            get
            {
                return this._triggerL;
            }
            set
            {
                this._triggerL = value;
            }
        }
        
        /// <summary>
        /// TriggerR
        /// </summary>
        [DataMember()]
        public Single TriggerR
        {
            get
            {
                return this._triggerR;
            }
            set
            {
                this._triggerR = value;
            }
        }
        
        /// <summary>
        /// Copy To Classic Controller State
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Classic Controller State
        /// </summary>
        public object Clone()
        {
            ClassicControllerState target = new ClassicControllerState();

            target.CalibrationInfo = this.CalibrationInfo;
            target.ButtonState = this.ButtonState;
            target.RawJoystickL = this.RawJoystickL;
            target.RawJoystickR = this.RawJoystickR;
            target.JoystickL = this.JoystickL;
            target.JoystickR = this.JoystickR;
            target.RawTriggerL = this.RawTriggerL;
            target.RawTriggerR = this.RawTriggerR;
            target.TriggerL = this.TriggerL;
            target.TriggerR = this.TriggerR;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            ((Microsoft.Dss.Core.IDssSerializable)CalibrationInfo).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)ButtonState).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)RawJoystickL).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)RawJoystickR).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)JoystickL).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)JoystickR).Serialize(writer);

            writer.Write(RawTriggerL);

            writer.Write(RawTriggerR);

            writer.Write(TriggerL);

            writer.Write(TriggerR);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            CalibrationInfo = (ClassicControllerCalibrationInfo)((Microsoft.Dss.Core.IDssSerializable)new ClassicControllerCalibrationInfo()).Deserialize(reader);

            ButtonState = (ClassicControllerButtonState)((Microsoft.Dss.Core.IDssSerializable)new ClassicControllerButtonState()).Deserialize(reader);

            RawJoystickL = (Point)((Microsoft.Dss.Core.IDssSerializable)new Point()).Deserialize(reader);

            RawJoystickR = (Point)((Microsoft.Dss.Core.IDssSerializable)new Point()).Deserialize(reader);

            JoystickL = (PointF)((Microsoft.Dss.Core.IDssSerializable)new PointF()).Deserialize(reader);

            JoystickR = (PointF)((Microsoft.Dss.Core.IDssSerializable)new PointF()).Deserialize(reader);

            RawTriggerL = reader.ReadByte();

            RawTriggerR = reader.ReadByte();

            TriggerL = reader.ReadSingle();

            TriggerR = reader.ReadSingle();

            return this;

        }
    }
    
    /// <summary>
    /// Classic Controller Calibration Info
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("ClassicControllerCalibrationInfo", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct ClassicControllerCalibrationInfo : ICloneable, IDssSerializable
    {
        
        private Byte _minXL;
        
        private Byte _midXL;
        
        private Byte _maxXL;
        
        private Byte _minYL;
        
        private Byte _midYL;
        
        private Byte _maxYL;
        
        private Byte _minXR;
        
        private Byte _midXR;
        
        private Byte _maxXR;
        
        private Byte _minYR;
        
        private Byte _midYR;
        
        private Byte _maxYR;
        
        private Byte _minTriggerL;
        
        private Byte _maxTriggerL;
        
        private Byte _minTriggerR;
        
        private Byte _maxTriggerR;
        
        /// <summary>
        /// MinXL
        /// </summary>
        [DataMember()]
        public Byte MinXL
        {
            get
            {
                return this._minXL;
            }
            set
            {
                this._minXL = value;
            }
        }
        
        /// <summary>
        /// MidXL
        /// </summary>
        [DataMember()]
        public Byte MidXL
        {
            get
            {
                return this._midXL;
            }
            set
            {
                this._midXL = value;
            }
        }
        
        /// <summary>
        /// MaxXL
        /// </summary>
        [DataMember()]
        public Byte MaxXL
        {
            get
            {
                return this._maxXL;
            }
            set
            {
                this._maxXL = value;
            }
        }
        
        /// <summary>
        /// MinYL
        /// </summary>
        [DataMember()]
        public Byte MinYL
        {
            get
            {
                return this._minYL;
            }
            set
            {
                this._minYL = value;
            }
        }
        
        /// <summary>
        /// MidYL
        /// </summary>
        [DataMember()]
        public Byte MidYL
        {
            get
            {
                return this._midYL;
            }
            set
            {
                this._midYL = value;
            }
        }
        
        /// <summary>
        /// MaxYL
        /// </summary>
        [DataMember()]
        public Byte MaxYL
        {
            get
            {
                return this._maxYL;
            }
            set
            {
                this._maxYL = value;
            }
        }
        
        /// <summary>
        /// MinXR
        /// </summary>
        [DataMember()]
        public Byte MinXR
        {
            get
            {
                return this._minXR;
            }
            set
            {
                this._minXR = value;
            }
        }
        
        /// <summary>
        /// MidXR
        /// </summary>
        [DataMember()]
        public Byte MidXR
        {
            get
            {
                return this._midXR;
            }
            set
            {
                this._midXR = value;
            }
        }
        
        /// <summary>
        /// MaxXR
        /// </summary>
        [DataMember()]
        public Byte MaxXR
        {
            get
            {
                return this._maxXR;
            }
            set
            {
                this._maxXR = value;
            }
        }
        
        /// <summary>
        /// MinYR
        /// </summary>
        [DataMember()]
        public Byte MinYR
        {
            get
            {
                return this._minYR;
            }
            set
            {
                this._minYR = value;
            }
        }
        
        /// <summary>
        /// MidYR
        /// </summary>
        [DataMember()]
        public Byte MidYR
        {
            get
            {
                return this._midYR;
            }
            set
            {
                this._midYR = value;
            }
        }
        
        /// <summary>
        /// MaxYR
        /// </summary>
        [DataMember()]
        public Byte MaxYR
        {
            get
            {
                return this._maxYR;
            }
            set
            {
                this._maxYR = value;
            }
        }
        
        /// <summary>
        /// Min TriggerL
        /// </summary>
        [DataMember()]
        public Byte MinTriggerL
        {
            get
            {
                return this._minTriggerL;
            }
            set
            {
                this._minTriggerL = value;
            }
        }
        
        /// <summary>
        /// Max TriggerL
        /// </summary>
        [DataMember()]
        public Byte MaxTriggerL
        {
            get
            {
                return this._maxTriggerL;
            }
            set
            {
                this._maxTriggerL = value;
            }
        }
        
        /// <summary>
        /// Min TriggerR
        /// </summary>
        [DataMember()]
        public Byte MinTriggerR
        {
            get
            {
                return this._minTriggerR;
            }
            set
            {
                this._minTriggerR = value;
            }
        }
        
        /// <summary>
        /// Max TriggerR
        /// </summary>
        [DataMember()]
        public Byte MaxTriggerR
        {
            get
            {
                return this._maxTriggerR;
            }
            set
            {
                this._maxTriggerR = value;
            }
        }
        
        /// <summary>
        /// Copy To Classic Controller Calibration Info
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Classic Controller Calibration Info
        /// </summary>
        public object Clone()
        {
            ClassicControllerCalibrationInfo target = new ClassicControllerCalibrationInfo();

            target.MinXL = this.MinXL;
            target.MidXL = this.MidXL;
            target.MaxXL = this.MaxXL;
            target.MinYL = this.MinYL;
            target.MidYL = this.MidYL;
            target.MaxYL = this.MaxYL;
            target.MinXR = this.MinXR;
            target.MidXR = this.MidXR;
            target.MaxXR = this.MaxXR;
            target.MinYR = this.MinYR;
            target.MidYR = this.MidYR;
            target.MaxYR = this.MaxYR;
            target.MinTriggerL = this.MinTriggerL;
            target.MaxTriggerL = this.MaxTriggerL;
            target.MinTriggerR = this.MinTriggerR;
            target.MaxTriggerR = this.MaxTriggerR;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(MinXL);

            writer.Write(MidXL);

            writer.Write(MaxXL);

            writer.Write(MinYL);

            writer.Write(MidYL);

            writer.Write(MaxYL);

            writer.Write(MinXR);

            writer.Write(MidXR);

            writer.Write(MaxXR);

            writer.Write(MinYR);

            writer.Write(MidYR);

            writer.Write(MaxYR);

            writer.Write(MinTriggerL);

            writer.Write(MaxTriggerL);

            writer.Write(MinTriggerR);

            writer.Write(MaxTriggerR);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            MinXL = reader.ReadByte();

            MidXL = reader.ReadByte();

            MaxXL = reader.ReadByte();

            MinYL = reader.ReadByte();

            MidYL = reader.ReadByte();

            MaxYL = reader.ReadByte();

            MinXR = reader.ReadByte();

            MidXR = reader.ReadByte();

            MaxXR = reader.ReadByte();

            MinYR = reader.ReadByte();

            MidYR = reader.ReadByte();

            MaxYR = reader.ReadByte();

            MinTriggerL = reader.ReadByte();

            MaxTriggerL = reader.ReadByte();

            MinTriggerR = reader.ReadByte();

            MaxTriggerR = reader.ReadByte();

            return this;

        }
    }
    
    /// <summary>
    /// Classic Controller Button State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("ClassicControllerButtonState", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct ClassicControllerButtonState : ICloneable, IDssSerializable
    {
        
        private Boolean _a;
        
        private Boolean _b;
        
        private Boolean _plus;
        
        private Boolean _home;
        
        private Boolean _minus;
        
        private Boolean _up;
        
        private Boolean _down;
        
        private Boolean _left;
        
        private Boolean _right;
        
        private Boolean _x;
        
        private Boolean _y;
        
        private Boolean _zL;
        
        private Boolean _zR;
        
        private Boolean _triggerL;
        
        private Boolean _triggerR;
        
        /// <summary>
        /// A
        /// </summary>
        [DataMember()]
        public Boolean A
        {
            get
            {
                return this._a;
            }
            set
            {
                this._a = value;
            }
        }
        
        /// <summary>
        /// B
        /// </summary>
        [DataMember()]
        public Boolean B
        {
            get
            {
                return this._b;
            }
            set
            {
                this._b = value;
            }
        }
        
        /// <summary>
        /// Plus
        /// </summary>
        [DataMember()]
        public Boolean Plus
        {
            get
            {
                return this._plus;
            }
            set
            {
                this._plus = value;
            }
        }
        
        /// <summary>
        /// Home
        /// </summary>
        [DataMember()]
        public Boolean Home
        {
            get
            {
                return this._home;
            }
            set
            {
                this._home = value;
            }
        }
        
        /// <summary>
        /// Minus
        /// </summary>
        [DataMember()]
        public Boolean Minus
        {
            get
            {
                return this._minus;
            }
            set
            {
                this._minus = value;
            }
        }
        
        /// <summary>
        /// Up
        /// </summary>
        [DataMember()]
        public Boolean Up
        {
            get
            {
                return this._up;
            }
            set
            {
                this._up = value;
            }
        }
        
        /// <summary>
        /// Down
        /// </summary>
        [DataMember()]
        public Boolean Down
        {
            get
            {
                return this._down;
            }
            set
            {
                this._down = value;
            }
        }
        
        /// <summary>
        /// Left
        /// </summary>
        [DataMember()]
        public Boolean Left
        {
            get
            {
                return this._left;
            }
            set
            {
                this._left = value;
            }
        }
        
        /// <summary>
        /// Right
        /// </summary>
        [DataMember()]
        public Boolean Right
        {
            get
            {
                return this._right;
            }
            set
            {
                this._right = value;
            }
        }
        
        /// <summary>
        /// X
        /// </summary>
        [DataMember()]
        public Boolean X
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
            }
        }
        
        /// <summary>
        /// Y
        /// </summary>
        [DataMember()]
        public Boolean Y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
            }
        }
        
        /// <summary>
        /// ZL
        /// </summary>
        [DataMember()]
        public Boolean ZL
        {
            get
            {
                return this._zL;
            }
            set
            {
                this._zL = value;
            }
        }
        
        /// <summary>
        /// ZR
        /// </summary>
        [DataMember()]
        public Boolean ZR
        {
            get
            {
                return this._zR;
            }
            set
            {
                this._zR = value;
            }
        }
        
        /// <summary>
        /// TriggerL
        /// </summary>
        [DataMember()]
        public Boolean TriggerL
        {
            get
            {
                return this._triggerL;
            }
            set
            {
                this._triggerL = value;
            }
        }
        
        /// <summary>
        /// TriggerR
        /// </summary>
        [DataMember()]
        public Boolean TriggerR
        {
            get
            {
                return this._triggerR;
            }
            set
            {
                this._triggerR = value;
            }
        }
        
        /// <summary>
        /// Copy To Classic Controller Button State
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Classic Controller Button State
        /// </summary>
        public object Clone()
        {
            ClassicControllerButtonState target = new ClassicControllerButtonState();

            target.A = this.A;
            target.B = this.B;
            target.Plus = this.Plus;
            target.Home = this.Home;
            target.Minus = this.Minus;
            target.Up = this.Up;
            target.Down = this.Down;
            target.Left = this.Left;
            target.Right = this.Right;
            target.X = this.X;
            target.Y = this.Y;
            target.ZL = this.ZL;
            target.ZR = this.ZR;
            target.TriggerL = this.TriggerL;
            target.TriggerR = this.TriggerR;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(A);

            writer.Write(B);

            writer.Write(Plus);

            writer.Write(Home);

            writer.Write(Minus);

            writer.Write(Up);

            writer.Write(Down);

            writer.Write(Left);

            writer.Write(Right);

            writer.Write(X);

            writer.Write(Y);

            writer.Write(ZL);

            writer.Write(ZR);

            writer.Write(TriggerL);

            writer.Write(TriggerR);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            A = reader.ReadBoolean();

            B = reader.ReadBoolean();

            Plus = reader.ReadBoolean();

            Home = reader.ReadBoolean();

            Minus = reader.ReadBoolean();

            Up = reader.ReadBoolean();

            Down = reader.ReadBoolean();

            Left = reader.ReadBoolean();

            Right = reader.ReadBoolean();

            X = reader.ReadBoolean();

            Y = reader.ReadBoolean();

            ZL = reader.ReadBoolean();

            ZR = reader.ReadBoolean();

            TriggerL = reader.ReadBoolean();

            TriggerR = reader.ReadBoolean();

            return this;

        }
    }
    
    /// <summary>
    /// Guitar State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("GuitarState", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct GuitarState : ICloneable, IDssSerializable
    {
        
        private GuitarButtonState _buttonState;
        
        private Point _rawJoystick;
        
        private PointF _joystick;
        
        private Byte _rawWhammyBar;
        
        private Single _whammyBar;
        
        /// <summary>
        /// Button State
        /// </summary>
        [DataMember()]
        public GuitarButtonState ButtonState
        {
            get
            {
                return this._buttonState;
            }
            set
            {
                this._buttonState = value;
            }
        }
        
        /// <summary>
        /// Raw Joystick
        /// </summary>
        [DataMember()]
        public Point RawJoystick
        {
            get
            {
                return this._rawJoystick;
            }
            set
            {
                this._rawJoystick = value;
            }
        }
        
        /// <summary>
        /// Joystick
        /// </summary>
        [DataMember()]
        public PointF Joystick
        {
            get
            {
                return this._joystick;
            }
            set
            {
                this._joystick = value;
            }
        }
        
        /// <summary>
        /// Raw Whammy Bar
        /// </summary>
        [DataMember()]
        public Byte RawWhammyBar
        {
            get
            {
                return this._rawWhammyBar;
            }
            set
            {
                this._rawWhammyBar = value;
            }
        }
        
        /// <summary>
        /// Whammy Bar
        /// </summary>
        [DataMember()]
        public Single WhammyBar
        {
            get
            {
                return this._whammyBar;
            }
            set
            {
                this._whammyBar = value;
            }
        }
        
        /// <summary>
        /// Copy To Guitar State
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Guitar State
        /// </summary>
        public object Clone()
        {
            GuitarState target = new GuitarState();

            target.ButtonState = this.ButtonState;
            target.RawJoystick = this.RawJoystick;
            target.Joystick = this.Joystick;
            target.RawWhammyBar = this.RawWhammyBar;
            target.WhammyBar = this.WhammyBar;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            ((Microsoft.Dss.Core.IDssSerializable)ButtonState).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)RawJoystick).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)Joystick).Serialize(writer);

            writer.Write(RawWhammyBar);

            writer.Write(WhammyBar);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            ButtonState = (GuitarButtonState)((Microsoft.Dss.Core.IDssSerializable)new GuitarButtonState()).Deserialize(reader);

            RawJoystick = (Point)((Microsoft.Dss.Core.IDssSerializable)new Point()).Deserialize(reader);

            Joystick = (PointF)((Microsoft.Dss.Core.IDssSerializable)new PointF()).Deserialize(reader);

            RawWhammyBar = reader.ReadByte();

            WhammyBar = reader.ReadSingle();

            return this;

        }
    }
    
    /// <summary>
    /// Guitar Button State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("GuitarButtonState", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct GuitarButtonState : ICloneable, IDssSerializable
    {
        
        private Boolean _strumUp;
        
        private Boolean _strumDown;
        
        private Boolean _green;
        
        private Boolean _red;
        
        private Boolean _yellow;
        
        private Boolean _blue;
        
        private Boolean _orange;
        
        private Boolean _minus;
        
        private Boolean _plus;
        
        /// <summary>
        /// Strum Up
        /// </summary>
        [DataMember()]
        public Boolean StrumUp
        {
            get
            {
                return this._strumUp;
            }
            set
            {
                this._strumUp = value;
            }
        }
        
        /// <summary>
        /// Strum Down
        /// </summary>
        [DataMember()]
        public Boolean StrumDown
        {
            get
            {
                return this._strumDown;
            }
            set
            {
                this._strumDown = value;
            }
        }
        
        /// <summary>
        /// Green
        /// </summary>
        [DataMember()]
        public Boolean Green
        {
            get
            {
                return this._green;
            }
            set
            {
                this._green = value;
            }
        }
        
        /// <summary>
        /// Red
        /// </summary>
        [DataMember()]
        public Boolean Red
        {
            get
            {
                return this._red;
            }
            set
            {
                this._red = value;
            }
        }
        
        /// <summary>
        /// Yellow
        /// </summary>
        [DataMember()]
        public Boolean Yellow
        {
            get
            {
                return this._yellow;
            }
            set
            {
                this._yellow = value;
            }
        }
        
        /// <summary>
        /// Blue
        /// </summary>
        [DataMember()]
        public Boolean Blue
        {
            get
            {
                return this._blue;
            }
            set
            {
                this._blue = value;
            }
        }
        
        /// <summary>
        /// Orange
        /// </summary>
        [DataMember()]
        public Boolean Orange
        {
            get
            {
                return this._orange;
            }
            set
            {
                this._orange = value;
            }
        }
        
        /// <summary>
        /// Minus
        /// </summary>
        [DataMember()]
        public Boolean Minus
        {
            get
            {
                return this._minus;
            }
            set
            {
                this._minus = value;
            }
        }
        
        /// <summary>
        /// Plus
        /// </summary>
        [DataMember()]
        public Boolean Plus
        {
            get
            {
                return this._plus;
            }
            set
            {
                this._plus = value;
            }
        }
        
        /// <summary>
        /// Copy To Guitar Button State
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Guitar Button State
        /// </summary>
        public object Clone()
        {
            GuitarButtonState target = new GuitarButtonState();

            target.StrumUp = this.StrumUp;
            target.StrumDown = this.StrumDown;
            target.Green = this.Green;
            target.Red = this.Red;
            target.Yellow = this.Yellow;
            target.Blue = this.Blue;
            target.Orange = this.Orange;
            target.Minus = this.Minus;
            target.Plus = this.Plus;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(StrumUp);

            writer.Write(StrumDown);

            writer.Write(Green);

            writer.Write(Red);

            writer.Write(Yellow);

            writer.Write(Blue);

            writer.Write(Orange);

            writer.Write(Minus);

            writer.Write(Plus);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            StrumUp = reader.ReadBoolean();

            StrumDown = reader.ReadBoolean();

            Green = reader.ReadBoolean();

            Red = reader.ReadBoolean();

            Yellow = reader.ReadBoolean();

            Blue = reader.ReadBoolean();

            Orange = reader.ReadBoolean();

            Minus = reader.ReadBoolean();

            Plus = reader.ReadBoolean();

            return this;

        }
    }
    
    /// <summary>
    /// Balance Board State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("BalanceBoardState", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct BalanceBoardState : ICloneable, IDssSerializable
    {
        
        private BalanceBoardCalibrationInfo _calibrationInfo;
        
        private BalanceBoardSensors _sensorValuesRaw;
        
        private BalanceBoardSensorsF _sensorValuesKg;
        
        private BalanceBoardSensorsF _sensorValuesLb;
        
        private Single _weightKg;
        
        private Single _weightLb;
        
        private PointF _centerOfGravity;
        
        /// <summary>
        /// Calibration Info
        /// </summary>
        [DataMember()]
        public BalanceBoardCalibrationInfo CalibrationInfo
        {
            get
            {
                return this._calibrationInfo;
            }
            set
            {
                this._calibrationInfo = value;
            }
        }
        
        /// <summary>
        /// Sensor Values Raw
        /// </summary>
        [DataMember()]
        public BalanceBoardSensors SensorValuesRaw
        {
            get
            {
                return this._sensorValuesRaw;
            }
            set
            {
                this._sensorValuesRaw = value;
            }
        }
        
        /// <summary>
        /// Sensor Values Kg
        /// </summary>
        [DataMember()]
        public BalanceBoardSensorsF SensorValuesKg
        {
            get
            {
                return this._sensorValuesKg;
            }
            set
            {
                this._sensorValuesKg = value;
            }
        }
        
        /// <summary>
        /// Sensor Values Lb
        /// </summary>
        [DataMember()]
        public BalanceBoardSensorsF SensorValuesLb
        {
            get
            {
                return this._sensorValuesLb;
            }
            set
            {
                this._sensorValuesLb = value;
            }
        }
        
        /// <summary>
        /// Weight Kg
        /// </summary>
        [DataMember()]
        public Single WeightKg
        {
            get
            {
                return this._weightKg;
            }
            set
            {
                this._weightKg = value;
            }
        }
        
        /// <summary>
        /// Weight Lb
        /// </summary>
        [DataMember()]
        public Single WeightLb
        {
            get
            {
                return this._weightLb;
            }
            set
            {
                this._weightLb = value;
            }
        }
        
        /// <summary>
        /// Center Of Gravity
        /// </summary>
        [DataMember()]
        public PointF CenterOfGravity
        {
            get
            {
                return this._centerOfGravity;
            }
            set
            {
                this._centerOfGravity = value;
            }
        }
        
        /// <summary>
        /// Copy To Balance Board State
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Balance Board State
        /// </summary>
        public object Clone()
        {
            BalanceBoardState target = new BalanceBoardState();

            target.CalibrationInfo = this.CalibrationInfo;
            target.SensorValuesRaw = this.SensorValuesRaw;
            target.SensorValuesKg = this.SensorValuesKg;
            target.SensorValuesLb = this.SensorValuesLb;
            target.WeightKg = this.WeightKg;
            target.WeightLb = this.WeightLb;
            target.CenterOfGravity = this.CenterOfGravity;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            ((Microsoft.Dss.Core.IDssSerializable)CalibrationInfo).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)SensorValuesRaw).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)SensorValuesKg).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)SensorValuesLb).Serialize(writer);

            writer.Write(WeightKg);

            writer.Write(WeightLb);

            ((Microsoft.Dss.Core.IDssSerializable)CenterOfGravity).Serialize(writer);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            CalibrationInfo = (BalanceBoardCalibrationInfo)((Microsoft.Dss.Core.IDssSerializable)new BalanceBoardCalibrationInfo()).Deserialize(reader);

            SensorValuesRaw = (BalanceBoardSensors)((Microsoft.Dss.Core.IDssSerializable)new BalanceBoardSensors()).Deserialize(reader);

            SensorValuesKg = (BalanceBoardSensorsF)((Microsoft.Dss.Core.IDssSerializable)new BalanceBoardSensorsF()).Deserialize(reader);

            SensorValuesLb = (BalanceBoardSensorsF)((Microsoft.Dss.Core.IDssSerializable)new BalanceBoardSensorsF()).Deserialize(reader);

            WeightKg = reader.ReadSingle();

            WeightLb = reader.ReadSingle();

            CenterOfGravity = (PointF)((Microsoft.Dss.Core.IDssSerializable)new PointF()).Deserialize(reader);

            return this;

        }
    }
    
    /// <summary>
    /// Balance Board Calibration Info
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("BalanceBoardCalibrationInfo", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct BalanceBoardCalibrationInfo : ICloneable, IDssSerializable
    {
        
        private BalanceBoardSensors _kg0;
        
        private BalanceBoardSensors _kg17;
        
        private BalanceBoardSensors _kg34;
        
        /// <summary>
        /// Kg0
        /// </summary>
        [DataMember()]
        public BalanceBoardSensors Kg0
        {
            get
            {
                return this._kg0;
            }
            set
            {
                this._kg0 = value;
            }
        }
        
        /// <summary>
        /// Kg17
        /// </summary>
        [DataMember()]
        public BalanceBoardSensors Kg17
        {
            get
            {
                return this._kg17;
            }
            set
            {
                this._kg17 = value;
            }
        }
        
        /// <summary>
        /// Kg34
        /// </summary>
        [DataMember()]
        public BalanceBoardSensors Kg34
        {
            get
            {
                return this._kg34;
            }
            set
            {
                this._kg34 = value;
            }
        }
        
        /// <summary>
        /// Copy To Balance Board Calibration Info
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Balance Board Calibration Info
        /// </summary>
        public object Clone()
        {
            BalanceBoardCalibrationInfo target = new BalanceBoardCalibrationInfo();

            target.Kg0 = this.Kg0;
            target.Kg17 = this.Kg17;
            target.Kg34 = this.Kg34;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            ((Microsoft.Dss.Core.IDssSerializable)Kg0).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)Kg17).Serialize(writer);

            ((Microsoft.Dss.Core.IDssSerializable)Kg34).Serialize(writer);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            Kg0 = (BalanceBoardSensors)((Microsoft.Dss.Core.IDssSerializable)new BalanceBoardSensors()).Deserialize(reader);

            Kg17 = (BalanceBoardSensors)((Microsoft.Dss.Core.IDssSerializable)new BalanceBoardSensors()).Deserialize(reader);

            Kg34 = (BalanceBoardSensors)((Microsoft.Dss.Core.IDssSerializable)new BalanceBoardSensors()).Deserialize(reader);

            return this;

        }
    }
    
    /// <summary>
    /// Balance Board Sensors
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("BalanceBoardSensors", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct BalanceBoardSensors : ICloneable, IDssSerializable
    {
        
        private Int16 _topRight;
        
        private Int16 _topLeft;
        
        private Int16 _bottomRight;
        
        private Int16 _bottomLeft;
        
        /// <summary>
        /// Top Right
        /// </summary>
        [DataMember()]
        public Int16 TopRight
        {
            get
            {
                return this._topRight;
            }
            set
            {
                this._topRight = value;
            }
        }
        
        /// <summary>
        /// Top Left
        /// </summary>
        [DataMember()]
        public Int16 TopLeft
        {
            get
            {
                return this._topLeft;
            }
            set
            {
                this._topLeft = value;
            }
        }
        
        /// <summary>
        /// Bottom Right
        /// </summary>
        [DataMember()]
        public Int16 BottomRight
        {
            get
            {
                return this._bottomRight;
            }
            set
            {
                this._bottomRight = value;
            }
        }
        
        /// <summary>
        /// Bottom Left
        /// </summary>
        [DataMember()]
        public Int16 BottomLeft
        {
            get
            {
                return this._bottomLeft;
            }
            set
            {
                this._bottomLeft = value;
            }
        }
        
        /// <summary>
        /// Copy To Balance Board Sensors
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Balance Board Sensors
        /// </summary>
        public object Clone()
        {
            BalanceBoardSensors target = new BalanceBoardSensors();

            target.TopRight = this.TopRight;
            target.TopLeft = this.TopLeft;
            target.BottomRight = this.BottomRight;
            target.BottomLeft = this.BottomLeft;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(TopRight);

            writer.Write(TopLeft);

            writer.Write(BottomRight);

            writer.Write(BottomLeft);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            TopRight = reader.ReadInt16();

            TopLeft = reader.ReadInt16();

            BottomRight = reader.ReadInt16();

            BottomLeft = reader.ReadInt16();

            return this;

        }
    }
    
    /// <summary>
    /// Balance Board SensorsF
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("BalanceBoardSensorsF", Namespace="http://schemas.tempuri.org/2007/06/wiimote.html")]
    public struct BalanceBoardSensorsF : ICloneable, IDssSerializable
    {
        
        private Single _topRight;
        
        private Single _topLeft;
        
        private Single _bottomRight;
        
        private Single _bottomLeft;
        
        /// <summary>
        /// Top Right
        /// </summary>
        [DataMember()]
        public Single TopRight
        {
            get
            {
                return this._topRight;
            }
            set
            {
                this._topRight = value;
            }
        }
        
        /// <summary>
        /// Top Left
        /// </summary>
        [DataMember()]
        public Single TopLeft
        {
            get
            {
                return this._topLeft;
            }
            set
            {
                this._topLeft = value;
            }
        }
        
        /// <summary>
        /// Bottom Right
        /// </summary>
        [DataMember()]
        public Single BottomRight
        {
            get
            {
                return this._bottomRight;
            }
            set
            {
                this._bottomRight = value;
            }
        }
        
        /// <summary>
        /// Bottom Left
        /// </summary>
        [DataMember()]
        public Single BottomLeft
        {
            get
            {
                return this._bottomLeft;
            }
            set
            {
                this._bottomLeft = value;
            }
        }
        
        /// <summary>
        /// Copy To Balance Board SensorsF
        /// </summary>
        public void CopyTo(IDssSerializable target)
        {
            throw new ArgumentException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        /// Clone Balance Board SensorsF
        /// </summary>
        public object Clone()
        {
            BalanceBoardSensorsF target = new BalanceBoardSensorsF();

            target.TopRight = this.TopRight;
            target.TopLeft = this.TopLeft;
            target.BottomRight = this.BottomRight;
            target.BottomLeft = this.BottomLeft;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(TopRight);

            writer.Write(TopLeft);

            writer.Write(BottomRight);

            writer.Write(BottomLeft);

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public object Deserialize(System.IO.BinaryReader reader)
        {
            TopRight = reader.ReadSingle();

            TopLeft = reader.ReadSingle();

            BottomRight = reader.ReadSingle();

            BottomLeft = reader.ReadSingle();

            return this;

        }
    }
    
    /// <summary>
    /// Wiimote Operations
    /// </summary>
    [ServicePort()]
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class WiimoteOperations : PortSet<Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, Get, Subscribe, WiimoteChanged, SetLEDs, SetRumble>
    {
        
        /// <summary>
        /// Required Lookup request body type
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup()
        {
            Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Dssp Default Lookup and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup(Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// A request to drop the service.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop()
        {
            Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Dssp Default Drop and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop(Microsoft.Dss.ServiceModel.Dssp.DropRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Required Get body type
        /// </summary>
        public virtual PortSet<WiimoteState,Fault> Get()
        {
            Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            Get op = new Get(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Get and return the response port.
        /// </summary>
        public virtual PortSet<WiimoteState,Fault> Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body)
        {
            Get op = new Get();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Subscribe and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,Fault> Subscribe(IPort notificationPort)
        {
            Subscribe op = new Subscribe();
            op.Body = new Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            op.NotificationPort = notificationPort;
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Subscribe and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,Fault> Subscribe(Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, IPort notificationPort)
        {
            Subscribe op = new Subscribe();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            op.NotificationPort = notificationPort;
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Wiimote State
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> WiimoteChanged()
        {
            WiimoteState body = new WiimoteState();
            WiimoteChanged op = new WiimoteChanged(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Wiimote Changed and return the response port.
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> WiimoteChanged(WiimoteState body)
        {
            WiimoteChanged op = new WiimoteChanged();
            op.Body = body ?? new WiimoteState();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// LED State
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> SetLEDs()
        {
            LEDState body = new LEDState();
            SetLEDs op = new SetLEDs(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post SetLE Ds and return the response port.
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> SetLEDs(LEDState body)
        {
            SetLEDs op = new SetLEDs();
            op.Body = body;
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Rumble Request
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> SetRumble()
        {
            RumbleRequest body = new RumbleRequest();
            SetRumble op = new SetRumble(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Set Rumble and return the response port.
        /// </summary>
        public virtual Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> SetRumble(RumbleRequest body)
        {
            SetRumble op = new SetRumble();
            op.Body = body;
            this.Post(op);
            return op.ResponsePort;

        }
    }
    
    /// <summary>
    /// Get
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : Microsoft.Dss.ServiceModel.Dssp.Get<Microsoft.Dss.ServiceModel.Dssp.GetRequestType, PortSet<WiimoteState, Fault>>
    {
        
        /// <summary>
        /// Get
        /// </summary>
        public Get()
        {
        }
        
        /// <summary>
        /// Get
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Get
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, Microsoft.Ccr.Core.PortSet<WiimoteState,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    
    /// <summary>
    /// Subscribe to Wiimote service notifications.
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    [DisplayName("Subscribe")]
    [Description("Subscribe to Wiimote service notifications.")]
    public class Subscribe : Microsoft.Dss.ServiceModel.Dssp.Subscribe<Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, Fault>>
    {
        
        /// <summary>
        /// Subscribe to Wiimote service notifications.
        /// </summary>
        public Subscribe()
        {
        }
        
        /// <summary>
        /// Subscribe to Wiimote service notifications.
        /// </summary>
        public Subscribe(Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Subscribe to Wiimote service notifications.
        /// </summary>
        public Subscribe(Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    
    /// <summary>
    /// Wiimote Changed
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class WiimoteChanged : Microsoft.Dss.ServiceModel.Dssp.Update<WiimoteState, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>>
    {
        
        /// <summary>
        /// Wiimote Changed
        /// </summary>
        public WiimoteChanged()
        {
        }
        
        /// <summary>
        /// Wiimote Changed
        /// </summary>
        public WiimoteChanged(WiimoteState body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Wiimote Changed
        /// </summary>
        public WiimoteChanged(WiimoteState body, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    
    /// <summary>
    /// Set Wiimote Leds
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    [DisplayName("Set Wiimote Leds")]
    public class SetLEDs : Microsoft.Dss.ServiceModel.Dssp.Update<LEDState, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>>
    {
        
        /// <summary>
        /// Set Wiimote Leds
        /// </summary>
        public SetLEDs()
        {
        }
        
        /// <summary>
        /// Set Wiimote Leds
        /// </summary>
        public SetLEDs(LEDState body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Set Wiimote Leds
        /// </summary>
        public SetLEDs(LEDState body, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    
    /// <summary>
    /// Set Wiimote Rumble
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    [DisplayName("Set Wiimote Rumble")]
    public class SetRumble : Microsoft.Dss.ServiceModel.Dssp.Update<RumbleRequest, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>>
    {
        
        /// <summary>
        /// Set Wiimote Rumble
        /// </summary>
        public SetRumble()
        {
        }
        
        /// <summary>
        /// Set Wiimote Rumble
        /// </summary>
        public SetRumble(RumbleRequest body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Set Wiimote Rumble
        /// </summary>
        public SetRumble(RumbleRequest body, Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort)
        {
        }
    }
}
